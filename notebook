{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## **MLP Neural Network for Regression Problem with Air Quality UCI Data Set**"
      ],
      "metadata": {
        "id": "DjreXlfUOfJu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1. **Introduction**\n",
        "\n",
        "In  this project, we have used a data set with measurements of an Air Quality Chemical Multisensor Device to predict the predict the CO level in the air 1 hour in advance.\n",
        "\n",
        "Description of the dataset (from https://archive.ics.uci.edu/ml/datasets/air+quality)\n",
        "\n",
        "* 0 Date (DD/MM/YYYY)\n",
        "* 1 Time (HH.MM.SS)\n",
        "* 2 True hourly averaged concentration CO in mg/m^3 (reference analyzer)\n",
        "* 3 PT08.S1 (tin oxide) hourly averaged sensor response (nominally CO targeted)\n",
        "* 4 True hourly averaged overall Non Metanic HydroCarbons concentration in microg/m^3 (reference analyzer)\n",
        "* 5 True hourly averaged Benzene concentration in microg/m^3 (reference analyzer)\n",
        "* 6 PT08.S2 (titania) hourly averaged sensor response (nominally NMHC targeted)\n",
        "* 7 True hourly averaged NOx concentration in ppb (reference analyzer)\n",
        "* 8 PT08.S3 (tungsten oxide) hourly averaged sensor response (nominally NOx targeted)\n",
        "* 9 True hourly averaged NO2 concentration in microg/m^3 (reference analyzer)\n",
        "* 10 PT08.S4 (tungsten oxide) hourly averaged sensor response (nominally NO2 targeted)\n",
        "* 11 PT08.S5 (indium oxide) hourly averaged sensor response (nominally O3 targeted)\n",
        "* 12 Temperature in Â°C\n",
        "* 13 Relative Humidity (%)\n",
        "* 14 AH Absolute Humidity\n",
        "\n",
        "In this work, we evaluate the application of different architectures of Multilayer Perceptron (MLP) Neural Networks to perform a regression task."
      ],
      "metadata": {
        "id": "kgBBdxHvnj-G"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Import of the necessary libraries"
      ],
      "metadata": {
        "id": "juYCVDP332a0"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "RTEzLmYuOZBt"
      },
      "outputs": [],
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from keras.layers import LeakyReLU\n",
        "from keras.layers import Dense, Input\n",
        "from keras.layers import Conv2D, Flatten\n",
        "from keras.models import Sequential\n",
        "from keras.models import Model\n",
        "from tensorflow.keras import regularizers\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from keras import backend as K\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Upload of the data set"
      ],
      "metadata": {
        "id": "nNyEi-NMR97n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "id": "UYEkLb8wR50P",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "outputId": "458560f9-f165-4d90-f0c8-c1048204a436"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-861889e1-9c0e-42a9-890f-6107a5cb5610\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-861889e1-9c0e-42a9-890f-6107a5cb5610\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving AirQualityUCI.csv to AirQualityUCI.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import io\n",
        "df = pd.read_csv(io.BytesIO(uploaded['AirQualityUCI.csv']), sep = ';')\n",
        "# Dataset is now stored in a Pandas Dataframe"
      ],
      "metadata": {
        "id": "L9SSAr0lS7Gu"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "vY0AiVNWXVHK",
        "outputId": "a56d360b-1184-4a49-9e36-bf5b41be66cc"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Date      Time CO(GT)  PT08.S1(CO)  NMHC(GT) C6H6(GT)  PT08.S2(NMHC)  \\\n",
              "0  10/03/2004  18.00.00    2,6       1360.0     150.0     11,9         1046.0   \n",
              "1  10/03/2004  19.00.00      2       1292.0     112.0      9,4          955.0   \n",
              "2  10/03/2004  20.00.00    2,2       1402.0      88.0      9,0          939.0   \n",
              "3  10/03/2004  21.00.00    2,2       1376.0      80.0      9,2          948.0   \n",
              "4  10/03/2004  22.00.00    1,6       1272.0      51.0      6,5          836.0   \n",
              "\n",
              "   NOx(GT)  PT08.S3(NOx)  NO2(GT)  PT08.S4(NO2)  PT08.S5(O3)     T    RH  \\\n",
              "0    166.0        1056.0    113.0        1692.0       1268.0  13,6  48,9   \n",
              "1    103.0        1174.0     92.0        1559.0        972.0  13,3  47,7   \n",
              "2    131.0        1140.0    114.0        1555.0       1074.0  11,9  54,0   \n",
              "3    172.0        1092.0    122.0        1584.0       1203.0  11,0  60,0   \n",
              "4    131.0        1205.0    116.0        1490.0       1110.0  11,2  59,6   \n",
              "\n",
              "       AH  Unnamed: 15  Unnamed: 16  \n",
              "0  0,7578          NaN          NaN  \n",
              "1  0,7255          NaN          NaN  \n",
              "2  0,7502          NaN          NaN  \n",
              "3  0,7867          NaN          NaN  \n",
              "4  0,7888          NaN          NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2ea197b2-588a-4076-9557-a85063256330\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Time</th>\n",
              "      <th>CO(GT)</th>\n",
              "      <th>PT08.S1(CO)</th>\n",
              "      <th>NMHC(GT)</th>\n",
              "      <th>C6H6(GT)</th>\n",
              "      <th>PT08.S2(NMHC)</th>\n",
              "      <th>NOx(GT)</th>\n",
              "      <th>PT08.S3(NOx)</th>\n",
              "      <th>NO2(GT)</th>\n",
              "      <th>PT08.S4(NO2)</th>\n",
              "      <th>PT08.S5(O3)</th>\n",
              "      <th>T</th>\n",
              "      <th>RH</th>\n",
              "      <th>AH</th>\n",
              "      <th>Unnamed: 15</th>\n",
              "      <th>Unnamed: 16</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10/03/2004</td>\n",
              "      <td>18.00.00</td>\n",
              "      <td>2,6</td>\n",
              "      <td>1360.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>11,9</td>\n",
              "      <td>1046.0</td>\n",
              "      <td>166.0</td>\n",
              "      <td>1056.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>1692.0</td>\n",
              "      <td>1268.0</td>\n",
              "      <td>13,6</td>\n",
              "      <td>48,9</td>\n",
              "      <td>0,7578</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10/03/2004</td>\n",
              "      <td>19.00.00</td>\n",
              "      <td>2</td>\n",
              "      <td>1292.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>9,4</td>\n",
              "      <td>955.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>1174.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>1559.0</td>\n",
              "      <td>972.0</td>\n",
              "      <td>13,3</td>\n",
              "      <td>47,7</td>\n",
              "      <td>0,7255</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10/03/2004</td>\n",
              "      <td>20.00.00</td>\n",
              "      <td>2,2</td>\n",
              "      <td>1402.0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>9,0</td>\n",
              "      <td>939.0</td>\n",
              "      <td>131.0</td>\n",
              "      <td>1140.0</td>\n",
              "      <td>114.0</td>\n",
              "      <td>1555.0</td>\n",
              "      <td>1074.0</td>\n",
              "      <td>11,9</td>\n",
              "      <td>54,0</td>\n",
              "      <td>0,7502</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>10/03/2004</td>\n",
              "      <td>21.00.00</td>\n",
              "      <td>2,2</td>\n",
              "      <td>1376.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>9,2</td>\n",
              "      <td>948.0</td>\n",
              "      <td>172.0</td>\n",
              "      <td>1092.0</td>\n",
              "      <td>122.0</td>\n",
              "      <td>1584.0</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>11,0</td>\n",
              "      <td>60,0</td>\n",
              "      <td>0,7867</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>10/03/2004</td>\n",
              "      <td>22.00.00</td>\n",
              "      <td>1,6</td>\n",
              "      <td>1272.0</td>\n",
              "      <td>51.0</td>\n",
              "      <td>6,5</td>\n",
              "      <td>836.0</td>\n",
              "      <td>131.0</td>\n",
              "      <td>1205.0</td>\n",
              "      <td>116.0</td>\n",
              "      <td>1490.0</td>\n",
              "      <td>1110.0</td>\n",
              "      <td>11,2</td>\n",
              "      <td>59,6</td>\n",
              "      <td>0,7888</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2ea197b2-588a-4076-9557-a85063256330')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2ea197b2-588a-4076-9557-a85063256330 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2ea197b2-588a-4076-9557-a85063256330');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#The data frame is too large (Lenght: 9537)\n",
        "#Let's use only a smaller part\n",
        "df = df[0:4000]"
      ],
      "metadata": {
        "id": "hffsVJle4MUm"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UGcvOOOK0Gyz",
        "outputId": "4360d294-d689-4623-9c0d-81f1c9307e03"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date              object\n",
              "Time              object\n",
              "CO(GT)            object\n",
              "PT08.S1(CO)      float64\n",
              "NMHC(GT)         float64\n",
              "C6H6(GT)          object\n",
              "PT08.S2(NMHC)    float64\n",
              "NOx(GT)          float64\n",
              "PT08.S3(NOx)     float64\n",
              "NO2(GT)          float64\n",
              "PT08.S4(NO2)     float64\n",
              "PT08.S5(O3)      float64\n",
              "T                 object\n",
              "RH                object\n",
              "AH                object\n",
              "Unnamed: 15      float64\n",
              "Unnamed: 16      float64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's turn the datatypes object into floor"
      ],
      "metadata": {
        "id": "MEAvZV7n6XVR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['CO(GT)'] = df['CO(GT)'].str.replace(',','.').astype(float)\n",
        "df['C6H6(GT)'] = df['C6H6(GT)'].str.replace(',','.').astype(float)\n",
        "df['T'] = df['T'].str.replace(',','.').astype(float)\n",
        "df['RH'] = df['RH'].str.replace(',','.').astype(float)\n",
        "df['AH'] = df['AH'].str.replace(',','.').astype(float)"
      ],
      "metadata": {
        "id": "0xyCxE7l6guk"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's replace the -200 values of 'CO(GT)' (these are missing values) with the mean of the other values of the column"
      ],
      "metadata": {
        "id": "lqDy4O20AyYk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "mean = df.loc[df['CO(GT)']!=-200, 'CO(GT)'].mean()\n",
        "mean\n",
        "df.loc[df['CO(GT)'] == -200, 'CO(GT)'] = np.nan\n",
        "df['CO(GT)'].fillna(mean,inplace=True)\n",
        "\n",
        "mean = df.loc[df['C6H6(GT)']!=-200, 'C6H6(GT)'].mean()\n",
        "mean\n",
        "df.loc[df['C6H6(GT)'] == -200, 'C6H6(GT)'] = np.nan\n",
        "df['C6H6(GT)'].fillna(mean,inplace=True)\n",
        "\n",
        "mean = df.loc[df['PT08.S1(CO)']!=-200, 'PT08.S1(CO)'].mean()\n",
        "mean\n",
        "df.loc[df['PT08.S1(CO)'] == -200, 'PT08.S1(CO)'] = np.nan\n",
        "df['PT08.S1(CO)'].fillna(mean,inplace=True)\n",
        "\n",
        "mean = df.loc[df['NMHC(GT)']!=-200, 'NMHC(GT)'].mean()\n",
        "mean\n",
        "df.loc[df['NMHC(GT)'] == -200, 'NMHC(GT)'] = np.nan\n",
        "df['NMHC(GT)'].fillna(mean,inplace=True)\n",
        "\n",
        "mean = df.loc[df['PT08.S2(NMHC)']!=-200, 'PT08.S2(NMHC)'].mean()\n",
        "mean\n",
        "df.loc[df['PT08.S2(NMHC)'] == -200, 'PT08.S2(NMHC)'] = np.nan\n",
        "df['PT08.S2(NMHC)'].fillna(mean,inplace=True)\n",
        "\n",
        "mean = df.loc[df['NOx(GT)']!=-200, 'NOx(GT)'].mean()\n",
        "mean\n",
        "df.loc[df['NOx(GT)'] == -200, 'NOx(GT)'] = np.nan\n",
        "df['NOx(GT)'].fillna(mean,inplace=True)\n",
        "\n",
        "mean = df.loc[df['PT08.S3(NOx)']!=-200, 'PT08.S3(NOx)'].mean()\n",
        "mean\n",
        "df.loc[df['PT08.S3(NOx)'] == -200, 'PT08.S3(NOx)'] = np.nan\n",
        "df['PT08.S3(NOx)'].fillna(mean,inplace=True)\n",
        "\n",
        "mean = df.loc[df['NO2(GT)']!=-200, 'NO2(GT)'].mean()\n",
        "mean\n",
        "df.loc[df['NO2(GT)'] == -200, 'NO2(GT)'] = np.nan\n",
        "df['NO2(GT)'].fillna(mean,inplace=True)\n",
        "\n",
        "mean = df.loc[df['PT08.S4(NO2)']!=-200, 'PT08.S4(NO2)'].mean()\n",
        "mean\n",
        "df.loc[df['PT08.S4(NO2)'] == -200, 'PT08.S4(NO2)'] = np.nan\n",
        "df['PT08.S4(NO2)'].fillna(mean,inplace=True)"
      ],
      "metadata": {
        "id": "HOtt-AyOA6N3"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "gDxuTGypp6Bc",
        "outputId": "74a37a49-4f4e-4f88-cbb9-1917ab82f81f"
      },
      "execution_count": 185,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Date      Time  CO(GT)  PT08.S1(CO)  NMHC(GT)  C6H6(GT)  \\\n",
              "0  10/03/2004  18.00.00     2.6       1360.0     150.0      11.9   \n",
              "1  10/03/2004  19.00.00     2.0       1292.0     112.0       9.4   \n",
              "2  10/03/2004  20.00.00     2.2       1402.0      88.0       9.0   \n",
              "3  10/03/2004  21.00.00     2.2       1376.0      80.0       9.2   \n",
              "4  10/03/2004  22.00.00     1.6       1272.0      51.0       6.5   \n",
              "\n",
              "   PT08.S2(NMHC)  NOx(GT)  PT08.S3(NOx)  NO2(GT)  PT08.S4(NO2)  PT08.S5(O3)  \\\n",
              "0         1046.0    166.0        1056.0    113.0        1692.0       1268.0   \n",
              "1          955.0    103.0        1174.0     92.0        1559.0        972.0   \n",
              "2          939.0    131.0        1140.0    114.0        1555.0       1074.0   \n",
              "3          948.0    172.0        1092.0    122.0        1584.0       1203.0   \n",
              "4          836.0    131.0        1205.0    116.0        1490.0       1110.0   \n",
              "\n",
              "      T    RH      AH  Unnamed: 15  Unnamed: 16  \n",
              "0  13.6  48.9  0.7578          NaN          NaN  \n",
              "1  13.3  47.7  0.7255          NaN          NaN  \n",
              "2  11.9  54.0  0.7502          NaN          NaN  \n",
              "3  11.0  60.0  0.7867          NaN          NaN  \n",
              "4  11.2  59.6  0.7888          NaN          NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-efa51de9-0032-496b-ab4d-8832c2240a19\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Time</th>\n",
              "      <th>CO(GT)</th>\n",
              "      <th>PT08.S1(CO)</th>\n",
              "      <th>NMHC(GT)</th>\n",
              "      <th>C6H6(GT)</th>\n",
              "      <th>PT08.S2(NMHC)</th>\n",
              "      <th>NOx(GT)</th>\n",
              "      <th>PT08.S3(NOx)</th>\n",
              "      <th>NO2(GT)</th>\n",
              "      <th>PT08.S4(NO2)</th>\n",
              "      <th>PT08.S5(O3)</th>\n",
              "      <th>T</th>\n",
              "      <th>RH</th>\n",
              "      <th>AH</th>\n",
              "      <th>Unnamed: 15</th>\n",
              "      <th>Unnamed: 16</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>10/03/2004</td>\n",
              "      <td>18.00.00</td>\n",
              "      <td>2.6</td>\n",
              "      <td>1360.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>11.9</td>\n",
              "      <td>1046.0</td>\n",
              "      <td>166.0</td>\n",
              "      <td>1056.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>1692.0</td>\n",
              "      <td>1268.0</td>\n",
              "      <td>13.6</td>\n",
              "      <td>48.9</td>\n",
              "      <td>0.7578</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10/03/2004</td>\n",
              "      <td>19.00.00</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1292.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>9.4</td>\n",
              "      <td>955.0</td>\n",
              "      <td>103.0</td>\n",
              "      <td>1174.0</td>\n",
              "      <td>92.0</td>\n",
              "      <td>1559.0</td>\n",
              "      <td>972.0</td>\n",
              "      <td>13.3</td>\n",
              "      <td>47.7</td>\n",
              "      <td>0.7255</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10/03/2004</td>\n",
              "      <td>20.00.00</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1402.0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>939.0</td>\n",
              "      <td>131.0</td>\n",
              "      <td>1140.0</td>\n",
              "      <td>114.0</td>\n",
              "      <td>1555.0</td>\n",
              "      <td>1074.0</td>\n",
              "      <td>11.9</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0.7502</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>10/03/2004</td>\n",
              "      <td>21.00.00</td>\n",
              "      <td>2.2</td>\n",
              "      <td>1376.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>9.2</td>\n",
              "      <td>948.0</td>\n",
              "      <td>172.0</td>\n",
              "      <td>1092.0</td>\n",
              "      <td>122.0</td>\n",
              "      <td>1584.0</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>11.0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>0.7867</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>10/03/2004</td>\n",
              "      <td>22.00.00</td>\n",
              "      <td>1.6</td>\n",
              "      <td>1272.0</td>\n",
              "      <td>51.0</td>\n",
              "      <td>6.5</td>\n",
              "      <td>836.0</td>\n",
              "      <td>131.0</td>\n",
              "      <td>1205.0</td>\n",
              "      <td>116.0</td>\n",
              "      <td>1490.0</td>\n",
              "      <td>1110.0</td>\n",
              "      <td>11.2</td>\n",
              "      <td>59.6</td>\n",
              "      <td>0.7888</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-efa51de9-0032-496b-ab4d-8832c2240a19')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-efa51de9-0032-496b-ab4d-8832c2240a19 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-efa51de9-0032-496b-ab4d-8832c2240a19');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 185
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Normalize and separate training, validation and test datasets**"
      ],
      "metadata": {
        "id": "gipxre7YIjMK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#X= df[['CO(GT)','C6H6(GT)','PT08.S1(CO)','NMHC(GT)','PT08.S2(NMHC)','NOx(GT)','PT08.S3(NOx)','NO2(GT)','PT08.S4(NO2)','T','RH','AH']][0:1999].values\n",
        "\n",
        "X= df[['CO(GT)','C6H6(GT)','PT08.S1(CO)','NMHC(GT)','PT08.S2(NMHC)']][0:2999].values\n",
        "\n",
        "y = df['CO(GT)'][1:3000].values\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\n",
        "\n",
        "scaler = MinMaxScaler(feature_range=(0,1))\n",
        "\n",
        "scaler.fit(X_train)   #we fit the scaler only with X_train\n",
        "\n",
        "X_train = scaler.transform(X_train)\n",
        "X_val = scaler.transform(X_val)\n",
        "X_test = scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "KH-tfp1VThJN"
      },
      "execution_count": 186,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Define parameters"
      ],
      "metadata": {
        "id": "Q-pxd6brIhqL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n_epochs=300"
      ],
      "metadata": {
        "id": "5CftcG3wIld-"
      },
      "execution_count": 187,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Definition and Training of Network 1**"
      ],
      "metadata": {
        "id": "6YGi7XVPPpRG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "input_dim = X_train.shape[1]    \n",
        "model_1 = Sequential()\n",
        "model_1.add(Dense(1,input_shape=(input_dim,),activation=LeakyReLU(alpha=0.1)))  #output layer\n",
        "model_1.compile(optimizer= 'SGD', loss='mse')\n",
        "model_1.summary()\n",
        "history_1 = model_1.fit(X_train, y_train, validation_data = (X_val,y_val), epochs=n_epochs,verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DtaMRayJPtGf",
        "outputId": "695d55c1-c536-4480-ecb8-88e9046bcd3a"
      },
      "execution_count": 188,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_60\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_210 (Dense)           (None, 1)                 6         \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 6\n",
            "Trainable params: 6\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "Epoch 1/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 2.2237 - val_loss: 1.1006\n",
            "Epoch 2/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.8847 - val_loss: 0.8640\n",
            "Epoch 3/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.8084 - val_loss: 0.8120\n",
            "Epoch 4/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.7740 - val_loss: 0.7818\n",
            "Epoch 5/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.7464 - val_loss: 0.7558\n",
            "Epoch 6/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.7224 - val_loss: 0.7405\n",
            "Epoch 7/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.7035 - val_loss: 0.7206\n",
            "Epoch 8/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6872 - val_loss: 0.7097\n",
            "Epoch 9/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6737 - val_loss: 0.6964\n",
            "Epoch 10/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6625 - val_loss: 0.6849\n",
            "Epoch 11/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6527 - val_loss: 0.6792\n",
            "Epoch 12/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6450 - val_loss: 0.6726\n",
            "Epoch 13/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6380 - val_loss: 0.6640\n",
            "Epoch 14/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6323 - val_loss: 0.6585\n",
            "Epoch 15/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6271 - val_loss: 0.6592\n",
            "Epoch 16/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6233 - val_loss: 0.6540\n",
            "Epoch 17/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6198 - val_loss: 0.6515\n",
            "Epoch 18/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6166 - val_loss: 0.6474\n",
            "Epoch 19/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6145 - val_loss: 0.6467\n",
            "Epoch 20/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6121 - val_loss: 0.6435\n",
            "Epoch 21/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6099 - val_loss: 0.6429\n",
            "Epoch 22/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6083 - val_loss: 0.6418\n",
            "Epoch 23/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6065 - val_loss: 0.6386\n",
            "Epoch 24/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6054 - val_loss: 0.6407\n",
            "Epoch 25/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6045 - val_loss: 0.6403\n",
            "Epoch 26/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6028 - val_loss: 0.6356\n",
            "Epoch 27/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6024 - val_loss: 0.6353\n",
            "Epoch 28/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6016 - val_loss: 0.6370\n",
            "Epoch 29/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6006 - val_loss: 0.6343\n",
            "Epoch 30/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5996 - val_loss: 0.6368\n",
            "Epoch 31/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5994 - val_loss: 0.6356\n",
            "Epoch 32/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5985 - val_loss: 0.6362\n",
            "Epoch 33/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5981 - val_loss: 0.6352\n",
            "Epoch 34/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5974 - val_loss: 0.6340\n",
            "Epoch 35/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5968 - val_loss: 0.6335\n",
            "Epoch 36/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5964 - val_loss: 0.6320\n",
            "Epoch 37/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5954 - val_loss: 0.6287\n",
            "Epoch 38/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5956 - val_loss: 0.6318\n",
            "Epoch 39/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5950 - val_loss: 0.6317\n",
            "Epoch 40/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5946 - val_loss: 0.6300\n",
            "Epoch 41/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5943 - val_loss: 0.6295\n",
            "Epoch 42/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5939 - val_loss: 0.6305\n",
            "Epoch 43/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5934 - val_loss: 0.6296\n",
            "Epoch 44/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5929 - val_loss: 0.6291\n",
            "Epoch 45/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5927 - val_loss: 0.6287\n",
            "Epoch 46/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5919 - val_loss: 0.6297\n",
            "Epoch 47/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5919 - val_loss: 0.6285\n",
            "Epoch 48/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5913 - val_loss: 0.6262\n",
            "Epoch 49/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5910 - val_loss: 0.6259\n",
            "Epoch 50/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5909 - val_loss: 0.6256\n",
            "Epoch 51/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5905 - val_loss: 0.6267\n",
            "Epoch 52/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5900 - val_loss: 0.6255\n",
            "Epoch 53/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5896 - val_loss: 0.6254\n",
            "Epoch 54/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5889 - val_loss: 0.6231\n",
            "Epoch 55/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5891 - val_loss: 0.6248\n",
            "Epoch 56/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5886 - val_loss: 0.6251\n",
            "Epoch 57/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5885 - val_loss: 0.6244\n",
            "Epoch 58/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5878 - val_loss: 0.6242\n",
            "Epoch 59/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5877 - val_loss: 0.6247\n",
            "Epoch 60/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5873 - val_loss: 0.6240\n",
            "Epoch 61/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5871 - val_loss: 0.6229\n",
            "Epoch 62/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5866 - val_loss: 0.6251\n",
            "Epoch 63/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5865 - val_loss: 0.6243\n",
            "Epoch 64/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5863 - val_loss: 0.6223\n",
            "Epoch 65/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5858 - val_loss: 0.6223\n",
            "Epoch 66/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5856 - val_loss: 0.6213\n",
            "Epoch 67/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5853 - val_loss: 0.6221\n",
            "Epoch 68/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5850 - val_loss: 0.6230\n",
            "Epoch 69/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5849 - val_loss: 0.6212\n",
            "Epoch 70/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5846 - val_loss: 0.6209\n",
            "Epoch 71/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5844 - val_loss: 0.6204\n",
            "Epoch 72/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5840 - val_loss: 0.6194\n",
            "Epoch 73/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5838 - val_loss: 0.6198\n",
            "Epoch 74/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5834 - val_loss: 0.6177\n",
            "Epoch 75/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5833 - val_loss: 0.6176\n",
            "Epoch 76/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5829 - val_loss: 0.6179\n",
            "Epoch 77/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5826 - val_loss: 0.6185\n",
            "Epoch 78/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5823 - val_loss: 0.6183\n",
            "Epoch 79/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5821 - val_loss: 0.6195\n",
            "Epoch 80/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5820 - val_loss: 0.6186\n",
            "Epoch 81/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5818 - val_loss: 0.6172\n",
            "Epoch 82/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5816 - val_loss: 0.6182\n",
            "Epoch 83/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5812 - val_loss: 0.6177\n",
            "Epoch 84/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5810 - val_loss: 0.6166\n",
            "Epoch 85/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5806 - val_loss: 0.6149\n",
            "Epoch 86/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5806 - val_loss: 0.6158\n",
            "Epoch 87/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5805 - val_loss: 0.6160\n",
            "Epoch 88/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5802 - val_loss: 0.6163\n",
            "Epoch 89/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5798 - val_loss: 0.6152\n",
            "Epoch 90/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5798 - val_loss: 0.6149\n",
            "Epoch 91/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5792 - val_loss: 0.6173\n",
            "Epoch 92/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5794 - val_loss: 0.6147\n",
            "Epoch 93/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5789 - val_loss: 0.6163\n",
            "Epoch 94/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5788 - val_loss: 0.6148\n",
            "Epoch 95/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5785 - val_loss: 0.6126\n",
            "Epoch 96/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5785 - val_loss: 0.6142\n",
            "Epoch 97/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5783 - val_loss: 0.6133\n",
            "Epoch 98/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5782 - val_loss: 0.6142\n",
            "Epoch 99/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5779 - val_loss: 0.6134\n",
            "Epoch 100/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5777 - val_loss: 0.6149\n",
            "Epoch 101/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5776 - val_loss: 0.6147\n",
            "Epoch 102/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5775 - val_loss: 0.6127\n",
            "Epoch 103/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5773 - val_loss: 0.6124\n",
            "Epoch 104/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5768 - val_loss: 0.6140\n",
            "Epoch 105/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5767 - val_loss: 0.6115\n",
            "Epoch 106/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5768 - val_loss: 0.6119\n",
            "Epoch 107/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5761 - val_loss: 0.6100\n",
            "Epoch 108/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5764 - val_loss: 0.6125\n",
            "Epoch 109/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5760 - val_loss: 0.6137\n",
            "Epoch 110/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5760 - val_loss: 0.6119\n",
            "Epoch 111/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5756 - val_loss: 0.6100\n",
            "Epoch 112/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5753 - val_loss: 0.6119\n",
            "Epoch 113/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5752 - val_loss: 0.6102\n",
            "Epoch 114/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5751 - val_loss: 0.6116\n",
            "Epoch 115/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5752 - val_loss: 0.6102\n",
            "Epoch 116/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5748 - val_loss: 0.6098\n",
            "Epoch 117/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5748 - val_loss: 0.6112\n",
            "Epoch 118/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5747 - val_loss: 0.6116\n",
            "Epoch 119/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5746 - val_loss: 0.6108\n",
            "Epoch 120/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5742 - val_loss: 0.6120\n",
            "Epoch 121/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5744 - val_loss: 0.6106\n",
            "Epoch 122/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5740 - val_loss: 0.6108\n",
            "Epoch 123/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5739 - val_loss: 0.6103\n",
            "Epoch 124/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5738 - val_loss: 0.6097\n",
            "Epoch 125/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5735 - val_loss: 0.6085\n",
            "Epoch 126/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5735 - val_loss: 0.6088\n",
            "Epoch 127/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5732 - val_loss: 0.6090\n",
            "Epoch 128/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5729 - val_loss: 0.6073\n",
            "Epoch 129/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5730 - val_loss: 0.6070\n",
            "Epoch 130/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5727 - val_loss: 0.6089\n",
            "Epoch 131/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5725 - val_loss: 0.6101\n",
            "Epoch 132/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5726 - val_loss: 0.6085\n",
            "Epoch 133/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5725 - val_loss: 0.6084\n",
            "Epoch 134/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5723 - val_loss: 0.6082\n",
            "Epoch 135/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5722 - val_loss: 0.6072\n",
            "Epoch 136/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5720 - val_loss: 0.6086\n",
            "Epoch 137/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5721 - val_loss: 0.6071\n",
            "Epoch 138/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5716 - val_loss: 0.6063\n",
            "Epoch 139/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5717 - val_loss: 0.6075\n",
            "Epoch 140/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5716 - val_loss: 0.6070\n",
            "Epoch 141/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5716 - val_loss: 0.6067\n",
            "Epoch 142/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5715 - val_loss: 0.6070\n",
            "Epoch 143/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5713 - val_loss: 0.6079\n",
            "Epoch 144/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5709 - val_loss: 0.6053\n",
            "Epoch 145/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5709 - val_loss: 0.6063\n",
            "Epoch 146/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5710 - val_loss: 0.6051\n",
            "Epoch 147/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5707 - val_loss: 0.6050\n",
            "Epoch 148/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5708 - val_loss: 0.6051\n",
            "Epoch 149/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5704 - val_loss: 0.6065\n",
            "Epoch 150/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5706 - val_loss: 0.6058\n",
            "Epoch 151/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5703 - val_loss: 0.6067\n",
            "Epoch 152/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5702 - val_loss: 0.6068\n",
            "Epoch 153/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5702 - val_loss: 0.6059\n",
            "Epoch 154/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5703 - val_loss: 0.6059\n",
            "Epoch 155/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5699 - val_loss: 0.6051\n",
            "Epoch 156/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5698 - val_loss: 0.6043\n",
            "Epoch 157/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5696 - val_loss: 0.6046\n",
            "Epoch 158/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5696 - val_loss: 0.6044\n",
            "Epoch 159/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5695 - val_loss: 0.6039\n",
            "Epoch 160/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5695 - val_loss: 0.6040\n",
            "Epoch 161/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5694 - val_loss: 0.6049\n",
            "Epoch 162/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5694 - val_loss: 0.6053\n",
            "Epoch 163/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5691 - val_loss: 0.6038\n",
            "Epoch 164/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5691 - val_loss: 0.6032\n",
            "Epoch 165/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5691 - val_loss: 0.6032\n",
            "Epoch 166/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5687 - val_loss: 0.6042\n",
            "Epoch 167/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5686 - val_loss: 0.6047\n",
            "Epoch 168/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5687 - val_loss: 0.6042\n",
            "Epoch 169/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5687 - val_loss: 0.6031\n",
            "Epoch 170/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5685 - val_loss: 0.6023\n",
            "Epoch 171/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5685 - val_loss: 0.6038\n",
            "Epoch 172/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5686 - val_loss: 0.6025\n",
            "Epoch 173/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5684 - val_loss: 0.6022\n",
            "Epoch 174/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5684 - val_loss: 0.6022\n",
            "Epoch 175/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5683 - val_loss: 0.6022\n",
            "Epoch 176/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5681 - val_loss: 0.6021\n",
            "Epoch 177/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5680 - val_loss: 0.6029\n",
            "Epoch 178/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5679 - val_loss: 0.6032\n",
            "Epoch 179/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5678 - val_loss: 0.6036\n",
            "Epoch 180/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5679 - val_loss: 0.6034\n",
            "Epoch 181/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5677 - val_loss: 0.6030\n",
            "Epoch 182/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5675 - val_loss: 0.6023\n",
            "Epoch 183/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5674 - val_loss: 0.6035\n",
            "Epoch 184/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5674 - val_loss: 0.6022\n",
            "Epoch 185/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5673 - val_loss: 0.6035\n",
            "Epoch 186/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5672 - val_loss: 0.6023\n",
            "Epoch 187/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5671 - val_loss: 0.6016\n",
            "Epoch 188/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5670 - val_loss: 0.6032\n",
            "Epoch 189/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5670 - val_loss: 0.6034\n",
            "Epoch 190/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5670 - val_loss: 0.6038\n",
            "Epoch 191/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5669 - val_loss: 0.6033\n",
            "Epoch 192/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5669 - val_loss: 0.6033\n",
            "Epoch 193/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5669 - val_loss: 0.6018\n",
            "Epoch 194/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5665 - val_loss: 0.6001\n",
            "Epoch 195/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5670 - val_loss: 0.6011\n",
            "Epoch 196/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5665 - val_loss: 0.6013\n",
            "Epoch 197/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5665 - val_loss: 0.6017\n",
            "Epoch 198/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5665 - val_loss: 0.6020\n",
            "Epoch 199/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5663 - val_loss: 0.6038\n",
            "Epoch 200/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5664 - val_loss: 0.6033\n",
            "Epoch 201/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5664 - val_loss: 0.6024\n",
            "Epoch 202/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5660 - val_loss: 0.6003\n",
            "Epoch 203/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5662 - val_loss: 0.6010\n",
            "Epoch 204/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5659 - val_loss: 0.5999\n",
            "Epoch 205/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5660 - val_loss: 0.6029\n",
            "Epoch 206/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5662 - val_loss: 0.6020\n",
            "Epoch 207/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5659 - val_loss: 0.6010\n",
            "Epoch 208/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5659 - val_loss: 0.6016\n",
            "Epoch 209/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5661 - val_loss: 0.6013\n",
            "Epoch 210/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5656 - val_loss: 0.6006\n",
            "Epoch 211/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5656 - val_loss: 0.6012\n",
            "Epoch 212/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5656 - val_loss: 0.6005\n",
            "Epoch 213/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5653 - val_loss: 0.6020\n",
            "Epoch 214/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5655 - val_loss: 0.6002\n",
            "Epoch 215/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5653 - val_loss: 0.5991\n",
            "Epoch 216/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5654 - val_loss: 0.6011\n",
            "Epoch 217/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5655 - val_loss: 0.6006\n",
            "Epoch 218/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5651 - val_loss: 0.5997\n",
            "Epoch 219/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5653 - val_loss: 0.6006\n",
            "Epoch 220/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5653 - val_loss: 0.6004\n",
            "Epoch 221/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5652 - val_loss: 0.5992\n",
            "Epoch 222/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5651 - val_loss: 0.5997\n",
            "Epoch 223/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5652 - val_loss: 0.6000\n",
            "Epoch 224/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5649 - val_loss: 0.5999\n",
            "Epoch 225/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5649 - val_loss: 0.6003\n",
            "Epoch 226/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5651 - val_loss: 0.6006\n",
            "Epoch 227/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5649 - val_loss: 0.6000\n",
            "Epoch 228/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5647 - val_loss: 0.5994\n",
            "Epoch 229/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5649 - val_loss: 0.5999\n",
            "Epoch 230/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5647 - val_loss: 0.6000\n",
            "Epoch 231/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5648 - val_loss: 0.6001\n",
            "Epoch 232/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5646 - val_loss: 0.5999\n",
            "Epoch 233/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5646 - val_loss: 0.5994\n",
            "Epoch 234/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5645 - val_loss: 0.5982\n",
            "Epoch 235/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5646 - val_loss: 0.5996\n",
            "Epoch 236/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5645 - val_loss: 0.6002\n",
            "Epoch 237/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5645 - val_loss: 0.5994\n",
            "Epoch 238/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5642 - val_loss: 0.6012\n",
            "Epoch 239/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5646 - val_loss: 0.6002\n",
            "Epoch 240/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5639 - val_loss: 0.5982\n",
            "Epoch 241/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5644 - val_loss: 0.5984\n",
            "Epoch 242/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5644 - val_loss: 0.5995\n",
            "Epoch 243/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5642 - val_loss: 0.6003\n",
            "Epoch 244/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5642 - val_loss: 0.5997\n",
            "Epoch 245/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5639 - val_loss: 0.5978\n",
            "Epoch 246/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5641 - val_loss: 0.5980\n",
            "Epoch 247/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5642 - val_loss: 0.5985\n",
            "Epoch 248/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5639 - val_loss: 0.5996\n",
            "Epoch 249/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5641 - val_loss: 0.5992\n",
            "Epoch 250/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5639 - val_loss: 0.5982\n",
            "Epoch 251/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5641 - val_loss: 0.5996\n",
            "Epoch 252/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5639 - val_loss: 0.5988\n",
            "Epoch 253/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5640 - val_loss: 0.5992\n",
            "Epoch 254/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5637 - val_loss: 0.6001\n",
            "Epoch 255/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5640 - val_loss: 0.5997\n",
            "Epoch 256/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5638 - val_loss: 0.5992\n",
            "Epoch 257/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5636 - val_loss: 0.5992\n",
            "Epoch 258/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5635 - val_loss: 0.5975\n",
            "Epoch 259/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5638 - val_loss: 0.5986\n",
            "Epoch 260/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5638 - val_loss: 0.5990\n",
            "Epoch 261/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5636 - val_loss: 0.5993\n",
            "Epoch 262/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5636 - val_loss: 0.5980\n",
            "Epoch 263/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5633 - val_loss: 0.6005\n",
            "Epoch 264/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5636 - val_loss: 0.5990\n",
            "Epoch 265/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5634 - val_loss: 0.6000\n",
            "Epoch 266/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5635 - val_loss: 0.5990\n",
            "Epoch 267/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5634 - val_loss: 0.5994\n",
            "Epoch 268/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5636 - val_loss: 0.5991\n",
            "Epoch 269/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5634 - val_loss: 0.5988\n",
            "Epoch 270/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5634 - val_loss: 0.5992\n",
            "Epoch 271/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5634 - val_loss: 0.5983\n",
            "Epoch 272/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5632 - val_loss: 0.5987\n",
            "Epoch 273/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5632 - val_loss: 0.5981\n",
            "Epoch 274/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5632 - val_loss: 0.5977\n",
            "Epoch 275/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5633 - val_loss: 0.5978\n",
            "Epoch 276/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5631 - val_loss: 0.5992\n",
            "Epoch 277/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5631 - val_loss: 0.5990\n",
            "Epoch 278/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5631 - val_loss: 0.5987\n",
            "Epoch 279/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5631 - val_loss: 0.5976\n",
            "Epoch 280/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5630 - val_loss: 0.5973\n",
            "Epoch 281/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5630 - val_loss: 0.5982\n",
            "Epoch 282/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5629 - val_loss: 0.5989\n",
            "Epoch 283/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5627 - val_loss: 0.5970\n",
            "Epoch 284/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5629 - val_loss: 0.5984\n",
            "Epoch 285/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5626 - val_loss: 0.5966\n",
            "Epoch 286/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5628 - val_loss: 0.5987\n",
            "Epoch 287/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5630 - val_loss: 0.5983\n",
            "Epoch 288/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5628 - val_loss: 0.5980\n",
            "Epoch 289/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5629 - val_loss: 0.5985\n",
            "Epoch 290/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5628 - val_loss: 0.5990\n",
            "Epoch 291/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5627 - val_loss: 0.5973\n",
            "Epoch 292/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5626 - val_loss: 0.5997\n",
            "Epoch 293/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5626 - val_loss: 0.5968\n",
            "Epoch 294/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5630 - val_loss: 0.5975\n",
            "Epoch 295/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5627 - val_loss: 0.5985\n",
            "Epoch 296/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5627 - val_loss: 0.5982\n",
            "Epoch 297/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5628 - val_loss: 0.5972\n",
            "Epoch 298/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5628 - val_loss: 0.5974\n",
            "Epoch 299/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5620 - val_loss: 0.5999\n",
            "Epoch 300/300\n",
            "60/60 [==============================] - 0s 6ms/step - loss: 0.5627 - val_loss: 0.5976\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Evaluation of Network 1**"
      ],
      "metadata": {
        "id": "ah-Rc0rTP2-R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Loss Function: Mean Squared Error (MSE)\n",
        "MSE_1 = model_1.evaluate(X_test,y_test,verbose=0)\n",
        "print(f'The mean squared error is {MSE_1}')\n",
        "#Turn test predicitions in a panda series\n",
        "test_predictions_1 = model_1.predict(X_test)\n",
        "test_predictions_1 = pd.Series(test_predictions_1.reshape(600,))\n",
        "pred_df_1 = pd.DataFrame(y_test,columns=['Test True Y'])\n",
        "pred_df_1 = pd.concat([pred_df_1,test_predictions_1],axis=1)  #axis=1 because we are joining along the columns\n",
        "pred_df_1.columns = ['Test True Y','Model Predictions']\n",
        "pred_df_1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "id": "e2o9yjQJP2lp",
        "outputId": "2bb2c674-c2f1-40e2-8a2c-a7a1b2a2b610"
      },
      "execution_count": 189,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The mean squared error is 0.4349794387817383\n",
            "19/19 [==============================] - 0s 1ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Test True Y  Model Predictions\n",
              "0       0.600000           1.031683\n",
              "1       1.931788           1.492876\n",
              "2       3.900000           3.229502\n",
              "3       2.700000           2.825266\n",
              "4       3.500000           3.840856\n",
              "..           ...                ...\n",
              "595     6.200000           4.127198\n",
              "596     4.600000           3.224671\n",
              "597     0.800000           1.463072\n",
              "598     0.600000           0.800727\n",
              "599     1.500000           1.346969\n",
              "\n",
              "[600 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-96b256a9-a9b2-4b85-9cb3-1a46f5fda2d1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Test True Y</th>\n",
              "      <th>Model Predictions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.600000</td>\n",
              "      <td>1.031683</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.931788</td>\n",
              "      <td>1.492876</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.900000</td>\n",
              "      <td>3.229502</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.700000</td>\n",
              "      <td>2.825266</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3.500000</td>\n",
              "      <td>3.840856</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>595</th>\n",
              "      <td>6.200000</td>\n",
              "      <td>4.127198</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>596</th>\n",
              "      <td>4.600000</td>\n",
              "      <td>3.224671</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>597</th>\n",
              "      <td>0.800000</td>\n",
              "      <td>1.463072</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598</th>\n",
              "      <td>0.600000</td>\n",
              "      <td>0.800727</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599</th>\n",
              "      <td>1.500000</td>\n",
              "      <td>1.346969</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>600 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-96b256a9-a9b2-4b85-9cb3-1a46f5fda2d1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-96b256a9-a9b2-4b85-9cb3-1a46f5fda2d1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-96b256a9-a9b2-4b85-9cb3-1a46f5fda2d1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 189
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Scatter Plot to compare the true and the predicted outputs**"
      ],
      "metadata": {
        "id": "bsKWqtcwQH2W"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig1 = plt.figure()\n",
        "ax = fig1.add_axes(sns.scatterplot(x='Test True Y', y = 'Model Predictions', data = pred_df_1))\n",
        "ax.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "rNi2ffbbR_Wt",
        "outputId": "be4d2bee-b9df-4325-aa31-18ecc380939d"
      },
      "execution_count": 190,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {},
          "execution_count": 190
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# list all data in history\n",
        "print(history_1.history.keys()) \n",
        "# summarize history for loss\n",
        "plt.plot(history_1.history['loss'])\n",
        "plt.plot(history_1.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'val'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "outputId": "c606ccf6-5ee2-46c3-e259-7d2bd8fa3906",
        "id": "DhGZZiBvQH2X"
      },
      "execution_count": 191,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['loss', 'val_loss'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Definition and Training of Network 2**"
      ],
      "metadata": {
        "id": "ayuzBEndZb0i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "input_dim = X_train.shape[1]    #entrada tem dimensão 12, isto é, 12 nós de entrada\n",
        "\n",
        "model_2 = Sequential()\n",
        "\n",
        "model_2.add(Dense(12,input_shape=(input_dim,),activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "model_2.add(Dense(1, activation=LeakyReLU(alpha=0.1)))                        #outuput layer\n",
        "\n",
        "model_2.compile(optimizer= 'SGD', loss='mse')\n",
        "model_2.summary()\n",
        "\n",
        "history_2 = model_2.fit(X_train, y_train, validation_data = (X_val,y_val), epochs=n_epochs,verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ubcHQLtYZd-q",
        "outputId": "5870ce6f-6203-4e47-e573-b74082df99fd"
      },
      "execution_count": 192,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_61\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_211 (Dense)           (None, 12)                72        \n",
            "                                                                 \n",
            " dense_212 (Dense)           (None, 1)                 13        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 85\n",
            "Trainable params: 85\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "Epoch 1/300\n",
            "60/60 [==============================] - 1s 4ms/step - loss: 1.4384 - val_loss: 0.7381\n",
            "Epoch 2/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6883 - val_loss: 0.6714\n",
            "Epoch 3/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6416 - val_loss: 0.6483\n",
            "Epoch 4/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.6140 - val_loss: 0.6254\n",
            "Epoch 5/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5968 - val_loss: 0.6223\n",
            "Epoch 6/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5899 - val_loss: 0.6142\n",
            "Epoch 7/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5847 - val_loss: 0.6144\n",
            "Epoch 8/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5830 - val_loss: 0.6167\n",
            "Epoch 9/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5796 - val_loss: 0.6256\n",
            "Epoch 10/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5800 - val_loss: 0.6133\n",
            "Epoch 11/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5775 - val_loss: 0.6085\n",
            "Epoch 12/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5778 - val_loss: 0.6096\n",
            "Epoch 13/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5781 - val_loss: 0.6071\n",
            "Epoch 14/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5746 - val_loss: 0.6067\n",
            "Epoch 15/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5768 - val_loss: 0.6160\n",
            "Epoch 16/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5767 - val_loss: 0.6123\n",
            "Epoch 17/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5758 - val_loss: 0.6070\n",
            "Epoch 18/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5754 - val_loss: 0.6156\n",
            "Epoch 19/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5757 - val_loss: 0.6165\n",
            "Epoch 20/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5739 - val_loss: 0.6193\n",
            "Epoch 21/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5740 - val_loss: 0.6090\n",
            "Epoch 22/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5733 - val_loss: 0.6075\n",
            "Epoch 23/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5737 - val_loss: 0.6094\n",
            "Epoch 24/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5729 - val_loss: 0.6034\n",
            "Epoch 25/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5726 - val_loss: 0.6033\n",
            "Epoch 26/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5715 - val_loss: 0.6070\n",
            "Epoch 27/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5717 - val_loss: 0.6116\n",
            "Epoch 28/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5717 - val_loss: 0.6061\n",
            "Epoch 29/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5702 - val_loss: 0.6077\n",
            "Epoch 30/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5703 - val_loss: 0.6079\n",
            "Epoch 31/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5696 - val_loss: 0.6038\n",
            "Epoch 32/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5690 - val_loss: 0.6021\n",
            "Epoch 33/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5689 - val_loss: 0.6005\n",
            "Epoch 34/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5689 - val_loss: 0.6083\n",
            "Epoch 35/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5671 - val_loss: 0.6021\n",
            "Epoch 36/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5673 - val_loss: 0.6026\n",
            "Epoch 37/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5660 - val_loss: 0.6005\n",
            "Epoch 38/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5676 - val_loss: 0.6089\n",
            "Epoch 39/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5672 - val_loss: 0.6072\n",
            "Epoch 40/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5672 - val_loss: 0.5974\n",
            "Epoch 41/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5663 - val_loss: 0.6123\n",
            "Epoch 42/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5666 - val_loss: 0.5979\n",
            "Epoch 43/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5665 - val_loss: 0.5995\n",
            "Epoch 44/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5660 - val_loss: 0.5977\n",
            "Epoch 45/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5666 - val_loss: 0.6024\n",
            "Epoch 46/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5636 - val_loss: 0.5965\n",
            "Epoch 47/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5647 - val_loss: 0.6106\n",
            "Epoch 48/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5629 - val_loss: 0.5991\n",
            "Epoch 49/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5637 - val_loss: 0.6098\n",
            "Epoch 50/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5644 - val_loss: 0.6109\n",
            "Epoch 51/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5641 - val_loss: 0.5964\n",
            "Epoch 52/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5657 - val_loss: 0.6012\n",
            "Epoch 53/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5641 - val_loss: 0.6015\n",
            "Epoch 54/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5641 - val_loss: 0.5966\n",
            "Epoch 55/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5637 - val_loss: 0.5952\n",
            "Epoch 56/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5630 - val_loss: 0.5995\n",
            "Epoch 57/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5632 - val_loss: 0.6097\n",
            "Epoch 58/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5637 - val_loss: 0.6008\n",
            "Epoch 59/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5625 - val_loss: 0.5956\n",
            "Epoch 60/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5622 - val_loss: 0.5947\n",
            "Epoch 61/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5633 - val_loss: 0.5959\n",
            "Epoch 62/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5632 - val_loss: 0.5991\n",
            "Epoch 63/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5635 - val_loss: 0.5963\n",
            "Epoch 64/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5625 - val_loss: 0.6038\n",
            "Epoch 65/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5636 - val_loss: 0.5952\n",
            "Epoch 66/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5625 - val_loss: 0.6036\n",
            "Epoch 67/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5620 - val_loss: 0.5943\n",
            "Epoch 68/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5627 - val_loss: 0.6004\n",
            "Epoch 69/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5627 - val_loss: 0.5975\n",
            "Epoch 70/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5607 - val_loss: 0.6054\n",
            "Epoch 71/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5619 - val_loss: 0.5973\n",
            "Epoch 72/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5623 - val_loss: 0.5961\n",
            "Epoch 73/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5633 - val_loss: 0.5962\n",
            "Epoch 74/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5617 - val_loss: 0.5941\n",
            "Epoch 75/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5618 - val_loss: 0.5938\n",
            "Epoch 76/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5620 - val_loss: 0.6007\n",
            "Epoch 77/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5607 - val_loss: 0.5933\n",
            "Epoch 78/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5610 - val_loss: 0.5996\n",
            "Epoch 79/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5614 - val_loss: 0.6025\n",
            "Epoch 80/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5615 - val_loss: 0.5977\n",
            "Epoch 81/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5611 - val_loss: 0.6003\n",
            "Epoch 82/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5613 - val_loss: 0.5934\n",
            "Epoch 83/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5614 - val_loss: 0.6011\n",
            "Epoch 84/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5617 - val_loss: 0.5941\n",
            "Epoch 85/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5608 - val_loss: 0.5936\n",
            "Epoch 86/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5606 - val_loss: 0.5949\n",
            "Epoch 87/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5604 - val_loss: 0.5973\n",
            "Epoch 88/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5598 - val_loss: 0.5928\n",
            "Epoch 89/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5619 - val_loss: 0.5968\n",
            "Epoch 90/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5613 - val_loss: 0.5940\n",
            "Epoch 91/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5611 - val_loss: 0.5971\n",
            "Epoch 92/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5609 - val_loss: 0.5990\n",
            "Epoch 93/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5605 - val_loss: 0.6008\n",
            "Epoch 94/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5603 - val_loss: 0.5957\n",
            "Epoch 95/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5610 - val_loss: 0.5970\n",
            "Epoch 96/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5605 - val_loss: 0.5928\n",
            "Epoch 97/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5605 - val_loss: 0.5941\n",
            "Epoch 98/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5611 - val_loss: 0.5922\n",
            "Epoch 99/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5602 - val_loss: 0.6013\n",
            "Epoch 100/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5600 - val_loss: 0.5923\n",
            "Epoch 101/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5608 - val_loss: 0.6034\n",
            "Epoch 102/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5614 - val_loss: 0.5944\n",
            "Epoch 103/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5607 - val_loss: 0.5944\n",
            "Epoch 104/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5602 - val_loss: 0.5959\n",
            "Epoch 105/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5607 - val_loss: 0.6015\n",
            "Epoch 106/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5605 - val_loss: 0.5979\n",
            "Epoch 107/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5599 - val_loss: 0.5972\n",
            "Epoch 108/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5605 - val_loss: 0.6016\n",
            "Epoch 109/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5615 - val_loss: 0.5940\n",
            "Epoch 110/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5610 - val_loss: 0.5948\n",
            "Epoch 111/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5609 - val_loss: 0.5948\n",
            "Epoch 112/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5606 - val_loss: 0.5918\n",
            "Epoch 113/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5593 - val_loss: 0.5921\n",
            "Epoch 114/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5601 - val_loss: 0.5963\n",
            "Epoch 115/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5608 - val_loss: 0.5966\n",
            "Epoch 116/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5604 - val_loss: 0.5975\n",
            "Epoch 117/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5602 - val_loss: 0.5984\n",
            "Epoch 118/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5598 - val_loss: 0.5978\n",
            "Epoch 119/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5597 - val_loss: 0.5934\n",
            "Epoch 120/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5601 - val_loss: 0.5995\n",
            "Epoch 121/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5601 - val_loss: 0.5919\n",
            "Epoch 122/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5605 - val_loss: 0.5989\n",
            "Epoch 123/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5602 - val_loss: 0.5935\n",
            "Epoch 124/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5606 - val_loss: 0.5917\n",
            "Epoch 125/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5595 - val_loss: 0.5984\n",
            "Epoch 126/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5593 - val_loss: 0.5916\n",
            "Epoch 127/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5603 - val_loss: 0.5931\n",
            "Epoch 128/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5612 - val_loss: 0.5917\n",
            "Epoch 129/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5588 - val_loss: 0.5923\n",
            "Epoch 130/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5610 - val_loss: 0.5944\n",
            "Epoch 131/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5594 - val_loss: 0.5915\n",
            "Epoch 132/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5604 - val_loss: 0.5960\n",
            "Epoch 133/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5595 - val_loss: 0.5937\n",
            "Epoch 134/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5591 - val_loss: 0.5928\n",
            "Epoch 135/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5595 - val_loss: 0.5956\n",
            "Epoch 136/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5593 - val_loss: 0.5969\n",
            "Epoch 137/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5602 - val_loss: 0.5924\n",
            "Epoch 138/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5603 - val_loss: 0.5990\n",
            "Epoch 139/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5596 - val_loss: 0.5928\n",
            "Epoch 140/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5594 - val_loss: 0.6051\n",
            "Epoch 141/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5592 - val_loss: 0.5914\n",
            "Epoch 142/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5594 - val_loss: 0.6003\n",
            "Epoch 143/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5588 - val_loss: 0.6060\n",
            "Epoch 144/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5590 - val_loss: 0.5923\n",
            "Epoch 145/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5599 - val_loss: 0.5998\n",
            "Epoch 146/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5596 - val_loss: 0.5918\n",
            "Epoch 147/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5589 - val_loss: 0.5952\n",
            "Epoch 148/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5577 - val_loss: 0.5918\n",
            "Epoch 149/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5596 - val_loss: 0.5927\n",
            "Epoch 150/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5570 - val_loss: 0.5919\n",
            "Epoch 151/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5602 - val_loss: 0.5963\n",
            "Epoch 152/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5597 - val_loss: 0.5980\n",
            "Epoch 153/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5589 - val_loss: 0.5914\n",
            "Epoch 154/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5592 - val_loss: 0.5929\n",
            "Epoch 155/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5585 - val_loss: 0.5938\n",
            "Epoch 156/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5597 - val_loss: 0.5946\n",
            "Epoch 157/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5596 - val_loss: 0.5941\n",
            "Epoch 158/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5584 - val_loss: 0.5913\n",
            "Epoch 159/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5593 - val_loss: 0.5939\n",
            "Epoch 160/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5560 - val_loss: 0.5971\n",
            "Epoch 161/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5595 - val_loss: 0.6028\n",
            "Epoch 162/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5607 - val_loss: 0.5960\n",
            "Epoch 163/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5592 - val_loss: 0.5941\n",
            "Epoch 164/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5592 - val_loss: 0.5939\n",
            "Epoch 165/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5600 - val_loss: 0.5962\n",
            "Epoch 166/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5598 - val_loss: 0.5932\n",
            "Epoch 167/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5599 - val_loss: 0.5910\n",
            "Epoch 168/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5591 - val_loss: 0.5934\n",
            "Epoch 169/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5590 - val_loss: 0.5928\n",
            "Epoch 170/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5592 - val_loss: 0.5997\n",
            "Epoch 171/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5582 - val_loss: 0.5988\n",
            "Epoch 172/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5599 - val_loss: 0.5923\n",
            "Epoch 173/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5593 - val_loss: 0.5910\n",
            "Epoch 174/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5591 - val_loss: 0.5952\n",
            "Epoch 175/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5592 - val_loss: 0.5940\n",
            "Epoch 176/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5581 - val_loss: 0.6006\n",
            "Epoch 177/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5582 - val_loss: 0.6020\n",
            "Epoch 178/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5601 - val_loss: 0.5952\n",
            "Epoch 179/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5582 - val_loss: 0.5906\n",
            "Epoch 180/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5582 - val_loss: 0.5908\n",
            "Epoch 181/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5591 - val_loss: 0.5936\n",
            "Epoch 182/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5595 - val_loss: 0.5920\n",
            "Epoch 183/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5592 - val_loss: 0.5905\n",
            "Epoch 184/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5599 - val_loss: 0.5968\n",
            "Epoch 185/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5595 - val_loss: 0.5965\n",
            "Epoch 186/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5587 - val_loss: 0.5921\n",
            "Epoch 187/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5592 - val_loss: 0.5905\n",
            "Epoch 188/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5583 - val_loss: 0.5918\n",
            "Epoch 189/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5596 - val_loss: 0.5925\n",
            "Epoch 190/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5594 - val_loss: 0.5934\n",
            "Epoch 191/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5587 - val_loss: 0.5914\n",
            "Epoch 192/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5582 - val_loss: 0.5959\n",
            "Epoch 193/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5591 - val_loss: 0.5933\n",
            "Epoch 194/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5577 - val_loss: 0.5919\n",
            "Epoch 195/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5585 - val_loss: 0.5917\n",
            "Epoch 196/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5585 - val_loss: 0.5977\n",
            "Epoch 197/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5590 - val_loss: 0.5916\n",
            "Epoch 198/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5596 - val_loss: 0.5946\n",
            "Epoch 199/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5579 - val_loss: 0.5952\n",
            "Epoch 200/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5582 - val_loss: 0.5932\n",
            "Epoch 201/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5576 - val_loss: 0.5917\n",
            "Epoch 202/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5593 - val_loss: 0.5957\n",
            "Epoch 203/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5597 - val_loss: 0.5928\n",
            "Epoch 204/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5591 - val_loss: 0.5947\n",
            "Epoch 205/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5576 - val_loss: 0.5896\n",
            "Epoch 206/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5594 - val_loss: 0.5937\n",
            "Epoch 207/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5587 - val_loss: 0.5914\n",
            "Epoch 208/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5582 - val_loss: 0.5963\n",
            "Epoch 209/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5587 - val_loss: 0.5902\n",
            "Epoch 210/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5593 - val_loss: 0.5994\n",
            "Epoch 211/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5583 - val_loss: 0.5974\n",
            "Epoch 212/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5592 - val_loss: 0.5901\n",
            "Epoch 213/300\n",
            "60/60 [==============================] - 0s 6ms/step - loss: 0.5577 - val_loss: 0.5936\n",
            "Epoch 214/300\n",
            "60/60 [==============================] - 1s 9ms/step - loss: 0.5574 - val_loss: 0.5936\n",
            "Epoch 215/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5592 - val_loss: 0.5925\n",
            "Epoch 216/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5579 - val_loss: 0.5912\n",
            "Epoch 217/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5583 - val_loss: 0.5966\n",
            "Epoch 218/300\n",
            "60/60 [==============================] - 1s 11ms/step - loss: 0.5584 - val_loss: 0.5911\n",
            "Epoch 219/300\n",
            "60/60 [==============================] - 0s 7ms/step - loss: 0.5581 - val_loss: 0.5954\n",
            "Epoch 220/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5585 - val_loss: 0.5934\n",
            "Epoch 221/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5583 - val_loss: 0.5962\n",
            "Epoch 222/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5585 - val_loss: 0.5894\n",
            "Epoch 223/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5588 - val_loss: 0.5963\n",
            "Epoch 224/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5582 - val_loss: 0.5926\n",
            "Epoch 225/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5593 - val_loss: 0.5907\n",
            "Epoch 226/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5583 - val_loss: 0.5965\n",
            "Epoch 227/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5582 - val_loss: 0.5908\n",
            "Epoch 228/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5577 - val_loss: 0.5973\n",
            "Epoch 229/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5570 - val_loss: 0.5894\n",
            "Epoch 230/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5595 - val_loss: 0.5913\n",
            "Epoch 231/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5573 - val_loss: 0.5898\n",
            "Epoch 232/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5584 - val_loss: 0.5897\n",
            "Epoch 233/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5580 - val_loss: 0.5893\n",
            "Epoch 234/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5590 - val_loss: 0.5894\n",
            "Epoch 235/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5575 - val_loss: 0.5911\n",
            "Epoch 236/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5572 - val_loss: 0.5910\n",
            "Epoch 237/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5570 - val_loss: 0.5887\n",
            "Epoch 238/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5578 - val_loss: 0.5959\n",
            "Epoch 239/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5569 - val_loss: 0.5904\n",
            "Epoch 240/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5582 - val_loss: 0.5913\n",
            "Epoch 241/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5573 - val_loss: 0.5908\n",
            "Epoch 242/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5587 - val_loss: 0.5912\n",
            "Epoch 243/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5573 - val_loss: 0.6033\n",
            "Epoch 244/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5582 - val_loss: 0.5903\n",
            "Epoch 245/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5585 - val_loss: 0.5921\n",
            "Epoch 246/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5568 - val_loss: 0.5887\n",
            "Epoch 247/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5573 - val_loss: 0.5893\n",
            "Epoch 248/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5574 - val_loss: 0.5902\n",
            "Epoch 249/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5573 - val_loss: 0.5935\n",
            "Epoch 250/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5569 - val_loss: 0.5934\n",
            "Epoch 251/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5579 - val_loss: 0.5970\n",
            "Epoch 252/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5563 - val_loss: 0.5892\n",
            "Epoch 253/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5578 - val_loss: 0.5975\n",
            "Epoch 254/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5577 - val_loss: 0.5886\n",
            "Epoch 255/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5581 - val_loss: 0.5888\n",
            "Epoch 256/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5569 - val_loss: 0.5936\n",
            "Epoch 257/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5580 - val_loss: 0.5915\n",
            "Epoch 258/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5587 - val_loss: 0.5893\n",
            "Epoch 259/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5568 - val_loss: 0.5889\n",
            "Epoch 260/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5582 - val_loss: 0.5946\n",
            "Epoch 261/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5569 - val_loss: 0.5885\n",
            "Epoch 262/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5567 - val_loss: 0.5902\n",
            "Epoch 263/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5580 - val_loss: 0.5913\n",
            "Epoch 264/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5573 - val_loss: 0.5995\n",
            "Epoch 265/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5569 - val_loss: 0.6007\n",
            "Epoch 266/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5581 - val_loss: 0.5977\n",
            "Epoch 267/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5573 - val_loss: 0.5946\n",
            "Epoch 268/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5572 - val_loss: 0.5895\n",
            "Epoch 269/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5570 - val_loss: 0.5974\n",
            "Epoch 270/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5580 - val_loss: 0.5889\n",
            "Epoch 271/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5566 - val_loss: 0.6027\n",
            "Epoch 272/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5575 - val_loss: 0.5886\n",
            "Epoch 273/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5579 - val_loss: 0.5889\n",
            "Epoch 274/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5582 - val_loss: 0.5895\n",
            "Epoch 275/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5574 - val_loss: 0.5889\n",
            "Epoch 276/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5579 - val_loss: 0.5896\n",
            "Epoch 277/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5574 - val_loss: 0.5935\n",
            "Epoch 278/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5571 - val_loss: 0.5978\n",
            "Epoch 279/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5567 - val_loss: 0.5897\n",
            "Epoch 280/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5570 - val_loss: 0.5938\n",
            "Epoch 281/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5569 - val_loss: 0.5963\n",
            "Epoch 282/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5578 - val_loss: 0.5936\n",
            "Epoch 283/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5568 - val_loss: 0.5894\n",
            "Epoch 284/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5570 - val_loss: 0.5884\n",
            "Epoch 285/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5570 - val_loss: 0.5928\n",
            "Epoch 286/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5576 - val_loss: 0.5884\n",
            "Epoch 287/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5580 - val_loss: 0.5887\n",
            "Epoch 288/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5578 - val_loss: 0.5895\n",
            "Epoch 289/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5572 - val_loss: 0.5907\n",
            "Epoch 290/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5562 - val_loss: 0.5889\n",
            "Epoch 291/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5569 - val_loss: 0.5921\n",
            "Epoch 292/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5564 - val_loss: 0.5880\n",
            "Epoch 293/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5572 - val_loss: 0.5879\n",
            "Epoch 294/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5571 - val_loss: 0.5929\n",
            "Epoch 295/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5578 - val_loss: 0.5913\n",
            "Epoch 296/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5568 - val_loss: 0.5940\n",
            "Epoch 297/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5561 - val_loss: 0.5883\n",
            "Epoch 298/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5578 - val_loss: 0.5948\n",
            "Epoch 299/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5567 - val_loss: 0.5890\n",
            "Epoch 300/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5579 - val_loss: 0.5884\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Evaluation of Network 2**"
      ],
      "metadata": {
        "id": "FyLGNZJ5aMY5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Loss Function: Mean Squared Error (MSE)\n",
        "MSE_2 = model_2.evaluate(X_test,y_test,verbose=0)\n",
        "print(f'The mean squared error is {MSE_2}')\n",
        "#Turn test predicitions in a panda series\n",
        "test_predictions_2 = model_2.predict(X_test)\n",
        "test_predictions_2 = pd.Series(test_predictions_2.reshape(600,))\n",
        "pred_df_2 = pd.DataFrame(y_test,columns=['Test True Y'])\n",
        "pred_df_2 = pd.concat([pred_df_2,test_predictions_2],axis=1)  #axis=1 because we are joining along the columns\n",
        "pred_df_2.columns = ['Test True Y','Model Predictions']\n",
        "pred_df_2"
      ],
      "metadata": {
        "id": "t2S9OvjzcY7V",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "outputId": "37e4a69a-75e8-4f69-d29b-f575feb48898"
      },
      "execution_count": 193,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The mean squared error is 0.4269172251224518\n",
            "19/19 [==============================] - 0s 4ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Test True Y  Model Predictions\n",
              "0       0.600000           1.030914\n",
              "1       1.931788           1.575048\n",
              "2       3.900000           3.292143\n",
              "3       2.700000           2.873455\n",
              "4       3.500000           3.939009\n",
              "..           ...                ...\n",
              "595     6.200000           4.154758\n",
              "596     4.600000           3.268108\n",
              "597     0.800000           1.555922\n",
              "598     0.600000           0.791315\n",
              "599     1.500000           1.389427\n",
              "\n",
              "[600 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4a081918-2316-4115-9acf-97d335fd58eb\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Test True Y</th>\n",
              "      <th>Model Predictions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.600000</td>\n",
              "      <td>1.030914</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.931788</td>\n",
              "      <td>1.575048</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.900000</td>\n",
              "      <td>3.292143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.700000</td>\n",
              "      <td>2.873455</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3.500000</td>\n",
              "      <td>3.939009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>595</th>\n",
              "      <td>6.200000</td>\n",
              "      <td>4.154758</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>596</th>\n",
              "      <td>4.600000</td>\n",
              "      <td>3.268108</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>597</th>\n",
              "      <td>0.800000</td>\n",
              "      <td>1.555922</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598</th>\n",
              "      <td>0.600000</td>\n",
              "      <td>0.791315</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599</th>\n",
              "      <td>1.500000</td>\n",
              "      <td>1.389427</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>600 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a081918-2316-4115-9acf-97d335fd58eb')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4a081918-2316-4115-9acf-97d335fd58eb button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4a081918-2316-4115-9acf-97d335fd58eb');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 193
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Scatter Plot to compare the true and the predicted outputs**"
      ],
      "metadata": {
        "id": "9CJhwsF2nBM2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.scatterplot(x='Test True Y', y = 'Model Predictions', data = pred_df_2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "Nn1CqBXRc5Mo",
        "outputId": "0b2db7de-0ede-40e2-93b4-a2656177715e"
      },
      "execution_count": 194,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f7e90c07410>"
            ]
          },
          "metadata": {},
          "execution_count": 194
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# list all data in history\n",
        "print(history_2.history.keys()) \n",
        "# summarize history for loss\n",
        "plt.plot(history_2.history['loss'])\n",
        "plt.plot(history_2.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'val'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "OgbOBl1FnEjL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "outputId": "12c50e60-bc4d-4ccd-a89d-5cebe8e63cb9"
      },
      "execution_count": 195,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['loss', 'val_loss'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Definition and Training of Network 3**"
      ],
      "metadata": {
        "id": "KCNnJ-ZZM7BP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "input_dim = X_train.shape[1]    #entrada tem dimensão 12, isto é, 12 nós de entrada\n",
        "\n",
        "model_3 = Sequential()\n",
        "\n",
        "model_3.add(Dense(120,input_shape=(input_dim,),activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "model_3.add(Dense(30,activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "model_3.add(Dense(10,activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "model_3.add(Dense(1, activation=LeakyReLU(alpha=0.1)))                        #outuput layer\n",
        "\n",
        "model_3.compile(optimizer= 'sgd', loss='mse')\n",
        "model_3.summary()\n",
        "\n",
        "#history_3 = model_3.fit(X_train, y_train, validation_data = (X_val,y_val), epochs=5000,verbose=0)\n",
        "history_3 = model_3.fit(X_train, y_train, validation_data = (X_val,y_val), epochs=n_epochs,verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ddMRwKjJM73c",
        "outputId": "45979d6a-2da1-4434-f348-018b8abb9988"
      },
      "execution_count": 220,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_78\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_277 (Dense)           (None, 120)               720       \n",
            "                                                                 \n",
            " dense_278 (Dense)           (None, 30)                3630      \n",
            "                                                                 \n",
            " dense_279 (Dense)           (None, 10)                310       \n",
            "                                                                 \n",
            " dense_280 (Dense)           (None, 1)                 11        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 4,671\n",
            "Trainable params: 4,671\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "Epoch 1/300\n",
            "60/60 [==============================] - 1s 5ms/step - loss: 1.4615 - val_loss: 0.8347\n",
            "Epoch 2/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.7357 - val_loss: 0.6596\n",
            "Epoch 3/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.6160 - val_loss: 0.6199\n",
            "Epoch 4/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5884 - val_loss: 0.6085\n",
            "Epoch 5/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5827 - val_loss: 0.6102\n",
            "Epoch 6/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5808 - val_loss: 0.6087\n",
            "Epoch 7/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5806 - val_loss: 0.6047\n",
            "Epoch 8/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5748 - val_loss: 0.6019\n",
            "Epoch 9/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5780 - val_loss: 0.6019\n",
            "Epoch 10/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5827 - val_loss: 0.6011\n",
            "Epoch 11/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5738 - val_loss: 0.6093\n",
            "Epoch 12/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5718 - val_loss: 0.5993\n",
            "Epoch 13/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5747 - val_loss: 0.5977\n",
            "Epoch 14/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5711 - val_loss: 0.5979\n",
            "Epoch 15/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5682 - val_loss: 0.5960\n",
            "Epoch 16/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5741 - val_loss: 0.6051\n",
            "Epoch 17/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5708 - val_loss: 0.5974\n",
            "Epoch 18/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5724 - val_loss: 0.5987\n",
            "Epoch 19/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5663 - val_loss: 0.5996\n",
            "Epoch 20/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5680 - val_loss: 0.5938\n",
            "Epoch 21/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5645 - val_loss: 0.6022\n",
            "Epoch 22/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5663 - val_loss: 0.5965\n",
            "Epoch 23/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5644 - val_loss: 0.6153\n",
            "Epoch 24/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5670 - val_loss: 0.5910\n",
            "Epoch 25/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5668 - val_loss: 0.5951\n",
            "Epoch 26/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5648 - val_loss: 0.5958\n",
            "Epoch 27/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5640 - val_loss: 0.6018\n",
            "Epoch 28/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5683 - val_loss: 0.5929\n",
            "Epoch 29/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5643 - val_loss: 0.6059\n",
            "Epoch 30/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5655 - val_loss: 0.6086\n",
            "Epoch 31/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5650 - val_loss: 0.6028\n",
            "Epoch 32/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5649 - val_loss: 0.5901\n",
            "Epoch 33/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5658 - val_loss: 0.5954\n",
            "Epoch 34/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5645 - val_loss: 0.5894\n",
            "Epoch 35/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5655 - val_loss: 0.6003\n",
            "Epoch 36/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5617 - val_loss: 0.5906\n",
            "Epoch 37/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5677 - val_loss: 0.5952\n",
            "Epoch 38/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5652 - val_loss: 0.5912\n",
            "Epoch 39/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5619 - val_loss: 0.6151\n",
            "Epoch 40/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5655 - val_loss: 0.5930\n",
            "Epoch 41/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5642 - val_loss: 0.5908\n",
            "Epoch 42/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5651 - val_loss: 0.6029\n",
            "Epoch 43/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5631 - val_loss: 0.5899\n",
            "Epoch 44/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5640 - val_loss: 0.5973\n",
            "Epoch 45/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5642 - val_loss: 0.5908\n",
            "Epoch 46/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5645 - val_loss: 0.5974\n",
            "Epoch 47/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5619 - val_loss: 0.5901\n",
            "Epoch 48/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5627 - val_loss: 0.5906\n",
            "Epoch 49/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5657 - val_loss: 0.6299\n",
            "Epoch 50/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5652 - val_loss: 0.5940\n",
            "Epoch 51/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5608 - val_loss: 0.5915\n",
            "Epoch 52/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5653 - val_loss: 0.6085\n",
            "Epoch 53/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5607 - val_loss: 0.5900\n",
            "Epoch 54/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5633 - val_loss: 0.5892\n",
            "Epoch 55/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5619 - val_loss: 0.6355\n",
            "Epoch 56/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5651 - val_loss: 0.5978\n",
            "Epoch 57/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5616 - val_loss: 0.5918\n",
            "Epoch 58/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5646 - val_loss: 0.5981\n",
            "Epoch 59/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5578 - val_loss: 0.6121\n",
            "Epoch 60/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5649 - val_loss: 0.5870\n",
            "Epoch 61/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5605 - val_loss: 0.5923\n",
            "Epoch 62/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5615 - val_loss: 0.6123\n",
            "Epoch 63/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5646 - val_loss: 0.5894\n",
            "Epoch 64/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5614 - val_loss: 0.5907\n",
            "Epoch 65/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5589 - val_loss: 0.5946\n",
            "Epoch 66/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5629 - val_loss: 0.5910\n",
            "Epoch 67/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5613 - val_loss: 0.5993\n",
            "Epoch 68/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5614 - val_loss: 0.5885\n",
            "Epoch 69/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5611 - val_loss: 0.5939\n",
            "Epoch 70/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5610 - val_loss: 0.5903\n",
            "Epoch 71/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5629 - val_loss: 0.5926\n",
            "Epoch 72/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5646 - val_loss: 0.5944\n",
            "Epoch 73/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5607 - val_loss: 0.5875\n",
            "Epoch 74/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5607 - val_loss: 0.5877\n",
            "Epoch 75/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5591 - val_loss: 0.5896\n",
            "Epoch 76/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5630 - val_loss: 0.6078\n",
            "Epoch 77/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5612 - val_loss: 0.5869\n",
            "Epoch 78/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5627 - val_loss: 0.5935\n",
            "Epoch 79/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5606 - val_loss: 0.5994\n",
            "Epoch 80/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5622 - val_loss: 0.6084\n",
            "Epoch 81/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5620 - val_loss: 0.5908\n",
            "Epoch 82/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5651 - val_loss: 0.6036\n",
            "Epoch 83/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5614 - val_loss: 0.5868\n",
            "Epoch 84/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5618 - val_loss: 0.5892\n",
            "Epoch 85/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5638 - val_loss: 0.5867\n",
            "Epoch 86/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5606 - val_loss: 0.5969\n",
            "Epoch 87/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5623 - val_loss: 0.5995\n",
            "Epoch 88/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5620 - val_loss: 0.5877\n",
            "Epoch 89/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5608 - val_loss: 0.5866\n",
            "Epoch 90/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5608 - val_loss: 0.6171\n",
            "Epoch 91/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5622 - val_loss: 0.5959\n",
            "Epoch 92/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5607 - val_loss: 0.5858\n",
            "Epoch 93/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5607 - val_loss: 0.5926\n",
            "Epoch 94/300\n",
            "60/60 [==============================] - 0s 5ms/step - loss: 0.5595 - val_loss: 0.6030\n",
            "Epoch 95/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5594 - val_loss: 0.6128\n",
            "Epoch 96/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5601 - val_loss: 0.5898\n",
            "Epoch 97/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5606 - val_loss: 0.5929\n",
            "Epoch 98/300\n",
            "60/60 [==============================] - 0s 5ms/step - loss: 0.5588 - val_loss: 0.6009\n",
            "Epoch 99/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5606 - val_loss: 0.5967\n",
            "Epoch 100/300\n",
            "60/60 [==============================] - 0s 5ms/step - loss: 0.5619 - val_loss: 0.5995\n",
            "Epoch 101/300\n",
            "60/60 [==============================] - 0s 5ms/step - loss: 0.5571 - val_loss: 0.5859\n",
            "Epoch 102/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5590 - val_loss: 0.5993\n",
            "Epoch 103/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5634 - val_loss: 0.5993\n",
            "Epoch 104/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5640 - val_loss: 0.5896\n",
            "Epoch 105/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5617 - val_loss: 0.5914\n",
            "Epoch 106/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5598 - val_loss: 0.5872\n",
            "Epoch 107/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5583 - val_loss: 0.5896\n",
            "Epoch 108/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5631 - val_loss: 0.5845\n",
            "Epoch 109/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5567 - val_loss: 0.5867\n",
            "Epoch 110/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5606 - val_loss: 0.5980\n",
            "Epoch 111/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5575 - val_loss: 0.5977\n",
            "Epoch 112/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5565 - val_loss: 0.5844\n",
            "Epoch 113/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5605 - val_loss: 0.5841\n",
            "Epoch 114/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5605 - val_loss: 0.5927\n",
            "Epoch 115/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5618 - val_loss: 0.6078\n",
            "Epoch 116/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5613 - val_loss: 0.5956\n",
            "Epoch 117/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5611 - val_loss: 0.5840\n",
            "Epoch 118/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5631 - val_loss: 0.5918\n",
            "Epoch 119/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5565 - val_loss: 0.5866\n",
            "Epoch 120/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5587 - val_loss: 0.5870\n",
            "Epoch 121/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5587 - val_loss: 0.5869\n",
            "Epoch 122/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5579 - val_loss: 0.5831\n",
            "Epoch 123/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5568 - val_loss: 0.5855\n",
            "Epoch 124/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5602 - val_loss: 0.6111\n",
            "Epoch 125/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5603 - val_loss: 0.5850\n",
            "Epoch 126/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5616 - val_loss: 0.5843\n",
            "Epoch 127/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5616 - val_loss: 0.5924\n",
            "Epoch 128/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5588 - val_loss: 0.5842\n",
            "Epoch 129/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5601 - val_loss: 0.5838\n",
            "Epoch 130/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5602 - val_loss: 0.5864\n",
            "Epoch 131/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5599 - val_loss: 0.5992\n",
            "Epoch 132/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5583 - val_loss: 0.5956\n",
            "Epoch 133/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5565 - val_loss: 0.6163\n",
            "Epoch 134/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5573 - val_loss: 0.5836\n",
            "Epoch 135/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5611 - val_loss: 0.5901\n",
            "Epoch 136/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5613 - val_loss: 0.5846\n",
            "Epoch 137/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5588 - val_loss: 0.5971\n",
            "Epoch 138/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5599 - val_loss: 0.5884\n",
            "Epoch 139/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5584 - val_loss: 0.5863\n",
            "Epoch 140/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5593 - val_loss: 0.5856\n",
            "Epoch 141/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5582 - val_loss: 0.5974\n",
            "Epoch 142/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5635 - val_loss: 0.5866\n",
            "Epoch 143/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5528 - val_loss: 0.5919\n",
            "Epoch 144/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5607 - val_loss: 0.5896\n",
            "Epoch 145/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5594 - val_loss: 0.5861\n",
            "Epoch 146/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5604 - val_loss: 0.5927\n",
            "Epoch 147/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5562 - val_loss: 0.5833\n",
            "Epoch 148/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5553 - val_loss: 0.6196\n",
            "Epoch 149/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5572 - val_loss: 0.5832\n",
            "Epoch 150/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5579 - val_loss: 0.5833\n",
            "Epoch 151/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5577 - val_loss: 0.5988\n",
            "Epoch 152/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5570 - val_loss: 0.5911\n",
            "Epoch 153/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5531 - val_loss: 0.6150\n",
            "Epoch 154/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5670 - val_loss: 0.5821\n",
            "Epoch 155/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5588 - val_loss: 0.5911\n",
            "Epoch 156/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5559 - val_loss: 0.5847\n",
            "Epoch 157/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5562 - val_loss: 0.5831\n",
            "Epoch 158/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5585 - val_loss: 0.6039\n",
            "Epoch 159/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5578 - val_loss: 0.5868\n",
            "Epoch 160/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5586 - val_loss: 0.5827\n",
            "Epoch 161/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5562 - val_loss: 0.5849\n",
            "Epoch 162/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5603 - val_loss: 0.5883\n",
            "Epoch 163/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5601 - val_loss: 0.5831\n",
            "Epoch 164/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5553 - val_loss: 0.5848\n",
            "Epoch 165/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5589 - val_loss: 0.5811\n",
            "Epoch 166/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5553 - val_loss: 0.5813\n",
            "Epoch 167/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5582 - val_loss: 0.5950\n",
            "Epoch 168/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5573 - val_loss: 0.5826\n",
            "Epoch 169/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5585 - val_loss: 0.6152\n",
            "Epoch 170/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5609 - val_loss: 0.5842\n",
            "Epoch 171/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5609 - val_loss: 0.5875\n",
            "Epoch 172/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5544 - val_loss: 0.5879\n",
            "Epoch 173/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5578 - val_loss: 0.5870\n",
            "Epoch 174/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5620 - val_loss: 0.6049\n",
            "Epoch 175/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5586 - val_loss: 0.5969\n",
            "Epoch 176/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5599 - val_loss: 0.5820\n",
            "Epoch 177/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5558 - val_loss: 0.5834\n",
            "Epoch 178/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5579 - val_loss: 0.5997\n",
            "Epoch 179/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5582 - val_loss: 0.5806\n",
            "Epoch 180/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5578 - val_loss: 0.5821\n",
            "Epoch 181/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5559 - val_loss: 0.5839\n",
            "Epoch 182/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5583 - val_loss: 0.5845\n",
            "Epoch 183/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5582 - val_loss: 0.5905\n",
            "Epoch 184/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5596 - val_loss: 0.5869\n",
            "Epoch 185/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5549 - val_loss: 0.5831\n",
            "Epoch 186/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5573 - val_loss: 0.5809\n",
            "Epoch 187/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5555 - val_loss: 0.6221\n",
            "Epoch 188/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5559 - val_loss: 0.5805\n",
            "Epoch 189/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5580 - val_loss: 0.5843\n",
            "Epoch 190/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5577 - val_loss: 0.5970\n",
            "Epoch 191/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5574 - val_loss: 0.5946\n",
            "Epoch 192/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5576 - val_loss: 0.5803\n",
            "Epoch 193/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5565 - val_loss: 0.5832\n",
            "Epoch 194/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5571 - val_loss: 0.5844\n",
            "Epoch 195/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5548 - val_loss: 0.6064\n",
            "Epoch 196/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5580 - val_loss: 0.6028\n",
            "Epoch 197/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5582 - val_loss: 0.5812\n",
            "Epoch 198/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5557 - val_loss: 0.5806\n",
            "Epoch 199/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5550 - val_loss: 0.6034\n",
            "Epoch 200/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5586 - val_loss: 0.5800\n",
            "Epoch 201/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5552 - val_loss: 0.6024\n",
            "Epoch 202/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5531 - val_loss: 0.5852\n",
            "Epoch 203/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5558 - val_loss: 0.5800\n",
            "Epoch 204/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5565 - val_loss: 0.5865\n",
            "Epoch 205/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5536 - val_loss: 0.5839\n",
            "Epoch 206/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5565 - val_loss: 0.5965\n",
            "Epoch 207/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5585 - val_loss: 0.5899\n",
            "Epoch 208/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5608 - val_loss: 0.5804\n",
            "Epoch 209/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5554 - val_loss: 0.5803\n",
            "Epoch 210/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5545 - val_loss: 0.5930\n",
            "Epoch 211/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5544 - val_loss: 0.5837\n",
            "Epoch 212/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5557 - val_loss: 0.5828\n",
            "Epoch 213/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5543 - val_loss: 0.5838\n",
            "Epoch 214/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5547 - val_loss: 0.5805\n",
            "Epoch 215/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5568 - val_loss: 0.5859\n",
            "Epoch 216/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5551 - val_loss: 0.5869\n",
            "Epoch 217/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5570 - val_loss: 0.5808\n",
            "Epoch 218/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5541 - val_loss: 0.5845\n",
            "Epoch 219/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5541 - val_loss: 0.5788\n",
            "Epoch 220/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5555 - val_loss: 0.5811\n",
            "Epoch 221/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5547 - val_loss: 0.5847\n",
            "Epoch 222/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5556 - val_loss: 0.5896\n",
            "Epoch 223/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5539 - val_loss: 0.5813\n",
            "Epoch 224/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5522 - val_loss: 0.5805\n",
            "Epoch 225/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5541 - val_loss: 0.5850\n",
            "Epoch 226/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5527 - val_loss: 0.5867\n",
            "Epoch 227/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5537 - val_loss: 0.5831\n",
            "Epoch 228/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5536 - val_loss: 0.5782\n",
            "Epoch 229/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5541 - val_loss: 0.5991\n",
            "Epoch 230/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5523 - val_loss: 0.5800\n",
            "Epoch 231/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5544 - val_loss: 0.5824\n",
            "Epoch 232/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5532 - val_loss: 0.5808\n",
            "Epoch 233/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5533 - val_loss: 0.5876\n",
            "Epoch 234/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5548 - val_loss: 0.5793\n",
            "Epoch 235/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5518 - val_loss: 0.5786\n",
            "Epoch 236/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5524 - val_loss: 0.5803\n",
            "Epoch 237/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5539 - val_loss: 0.5793\n",
            "Epoch 238/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5519 - val_loss: 0.5803\n",
            "Epoch 239/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5553 - val_loss: 0.5785\n",
            "Epoch 240/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5575 - val_loss: 0.5812\n",
            "Epoch 241/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5533 - val_loss: 0.5787\n",
            "Epoch 242/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5545 - val_loss: 0.5791\n",
            "Epoch 243/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5526 - val_loss: 0.5868\n",
            "Epoch 244/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5513 - val_loss: 0.5769\n",
            "Epoch 245/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5546 - val_loss: 0.5773\n",
            "Epoch 246/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5547 - val_loss: 0.5807\n",
            "Epoch 247/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5526 - val_loss: 0.5776\n",
            "Epoch 248/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5555 - val_loss: 0.5853\n",
            "Epoch 249/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5552 - val_loss: 0.5796\n",
            "Epoch 250/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5491 - val_loss: 0.5772\n",
            "Epoch 251/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5571 - val_loss: 0.5820\n",
            "Epoch 252/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5534 - val_loss: 0.5893\n",
            "Epoch 253/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5549 - val_loss: 0.5830\n",
            "Epoch 254/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5528 - val_loss: 0.5785\n",
            "Epoch 255/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5526 - val_loss: 0.5781\n",
            "Epoch 256/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5574 - val_loss: 0.5808\n",
            "Epoch 257/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5530 - val_loss: 0.5892\n",
            "Epoch 258/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5550 - val_loss: 0.5887\n",
            "Epoch 259/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5548 - val_loss: 0.6013\n",
            "Epoch 260/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5527 - val_loss: 0.5820\n",
            "Epoch 261/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5538 - val_loss: 0.5771\n",
            "Epoch 262/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5540 - val_loss: 0.5776\n",
            "Epoch 263/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5528 - val_loss: 0.5767\n",
            "Epoch 264/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5558 - val_loss: 0.5812\n",
            "Epoch 265/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5516 - val_loss: 0.5843\n",
            "Epoch 266/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5547 - val_loss: 0.5821\n",
            "Epoch 267/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5539 - val_loss: 0.5813\n",
            "Epoch 268/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5529 - val_loss: 0.5803\n",
            "Epoch 269/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5527 - val_loss: 0.5812\n",
            "Epoch 270/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5485 - val_loss: 0.6167\n",
            "Epoch 271/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5529 - val_loss: 0.5778\n",
            "Epoch 272/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5527 - val_loss: 0.5778\n",
            "Epoch 273/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5501 - val_loss: 0.5785\n",
            "Epoch 274/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5534 - val_loss: 0.5778\n",
            "Epoch 275/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5544 - val_loss: 0.5762\n",
            "Epoch 276/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5546 - val_loss: 0.5790\n",
            "Epoch 277/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5532 - val_loss: 0.5785\n",
            "Epoch 278/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5511 - val_loss: 0.5757\n",
            "Epoch 279/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5534 - val_loss: 0.5800\n",
            "Epoch 280/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5482 - val_loss: 0.5775\n",
            "Epoch 281/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5508 - val_loss: 0.5785\n",
            "Epoch 282/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5523 - val_loss: 0.5758\n",
            "Epoch 283/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5549 - val_loss: 0.5753\n",
            "Epoch 284/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5491 - val_loss: 0.5839\n",
            "Epoch 285/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5507 - val_loss: 0.5815\n",
            "Epoch 286/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5515 - val_loss: 0.5750\n",
            "Epoch 287/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5488 - val_loss: 0.5838\n",
            "Epoch 288/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5512 - val_loss: 0.5934\n",
            "Epoch 289/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5519 - val_loss: 0.5753\n",
            "Epoch 290/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5529 - val_loss: 0.5752\n",
            "Epoch 291/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5474 - val_loss: 0.5769\n",
            "Epoch 292/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5502 - val_loss: 0.5746\n",
            "Epoch 293/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5497 - val_loss: 0.5817\n",
            "Epoch 294/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5534 - val_loss: 0.5810\n",
            "Epoch 295/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5494 - val_loss: 0.5777\n",
            "Epoch 296/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5507 - val_loss: 0.5945\n",
            "Epoch 297/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5555 - val_loss: 0.5760\n",
            "Epoch 298/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5519 - val_loss: 0.5748\n",
            "Epoch 299/300\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 0.5503 - val_loss: 0.5754\n",
            "Epoch 300/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5531 - val_loss: 0.5769\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Evaluation of Network 3**"
      ],
      "metadata": {
        "id": "HZRtRnvdNnUB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Loss Function: Mean Squared Error (MSE)\n",
        "MSE_3 = model_3.evaluate(X_test,y_test,verbose=0)\n",
        "print(f'The mean squared error is {MSE_3}')\n",
        "#Turn test predicitions in a panda series\n",
        "test_predictions_3 = model_3.predict(X_test)\n",
        "test_predictions_3 = pd.Series(test_predictions_3.reshape(600,))\n",
        "pred_df_3 = pd.DataFrame(y_test,columns=['Test True Y'])\n",
        "pred_df_3 = pd.concat([pred_df_3,test_predictions_3],axis=1)  #axis=1 because we are joining along the columns\n",
        "pred_df_3.columns = ['Test True Y','Model Predictions']\n",
        "pred_df_3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "id": "Phl_F16aNMVZ",
        "outputId": "34b4b771-9535-4385-8650-b6e6fc493684"
      },
      "execution_count": 221,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The mean squared error is 0.40785548090934753\n",
            "19/19 [==============================] - 0s 2ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Test True Y  Model Predictions\n",
              "0       0.600000           0.948510\n",
              "1       1.931788           1.528003\n",
              "2       3.900000           3.354389\n",
              "3       2.700000           2.919206\n",
              "4       3.500000           3.946209\n",
              "..           ...                ...\n",
              "595     6.200000           4.188981\n",
              "596     4.600000           3.272721\n",
              "597     0.800000           1.493513\n",
              "598     0.600000           0.735077\n",
              "599     1.500000           1.339632\n",
              "\n",
              "[600 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-83f71ce6-be7a-4bd9-9f7d-e2c68dcefa5d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Test True Y</th>\n",
              "      <th>Model Predictions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.600000</td>\n",
              "      <td>0.948510</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.931788</td>\n",
              "      <td>1.528003</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.900000</td>\n",
              "      <td>3.354389</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.700000</td>\n",
              "      <td>2.919206</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3.500000</td>\n",
              "      <td>3.946209</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>595</th>\n",
              "      <td>6.200000</td>\n",
              "      <td>4.188981</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>596</th>\n",
              "      <td>4.600000</td>\n",
              "      <td>3.272721</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>597</th>\n",
              "      <td>0.800000</td>\n",
              "      <td>1.493513</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598</th>\n",
              "      <td>0.600000</td>\n",
              "      <td>0.735077</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599</th>\n",
              "      <td>1.500000</td>\n",
              "      <td>1.339632</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>600 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-83f71ce6-be7a-4bd9-9f7d-e2c68dcefa5d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-83f71ce6-be7a-4bd9-9f7d-e2c68dcefa5d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-83f71ce6-be7a-4bd9-9f7d-e2c68dcefa5d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 221
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Scatter Plot to compare the true and the predicted outputs**\n",
        "\n"
      ],
      "metadata": {
        "id": "HKi9XDtqN29T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.scatterplot(x='Test True Y', y = 'Model Predictions', data = pred_df_3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "outputId": "5529e175-766a-4c47-beaf-4720df79854b",
        "id": "3CtYNnzTN29U"
      },
      "execution_count": 222,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f7e8c99f490>"
            ]
          },
          "metadata": {},
          "execution_count": 222
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# list all data in history\n",
        "print(history_3.history.keys()) \n",
        "# summarize history for loss\n",
        "plt.plot(history_3.history['loss'])\n",
        "plt.plot(history_3.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'val'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "ngD_WC4EN4ks",
        "outputId": "1b80ceb6-09c6-4a6a-fa00-331a3b8df857"
      },
      "execution_count": 223,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['loss', 'val_loss'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Definition and Training of Network 4**\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "hZB-O9t5UlNN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "noise = np.random.normal(0,1,X_train.shape)\n",
        "X_train_noise = X_train+0.6*noise\n",
        "noise = np.random.normal(0,1,X_val.shape)\n",
        "X_val_noise = X_val+0.6*noise"
      ],
      "metadata": {
        "id": "3A1N6lLxr0xM"
      },
      "execution_count": 246,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "input_dim = X_train.shape[1]    #entrada tem dimensão 12, isto é, 12 nós de entrada\n",
        "\n",
        "model_4 = Sequential()\n",
        "\n",
        "model_4.add(Dense(50,input_shape=(input_dim,),activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "model_4.add(Dense(20,activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "model_4.add(Dense(1, activation=LeakyReLU(alpha=0.1)))   #outuput layer\n",
        "model_4.compile(optimizer= 'SGD', loss='mse')\n",
        "model_4.summary()\n",
        "\n",
        "history_4 = model_4.fit(X_train_noise, y_train, validation_data = (X_val_noise,y_val), epochs=400,verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "333afa83-dccd-48e2-bdd6-3e10633179f8",
        "id": "Ky6iFqJTUlNO"
      },
      "execution_count": 247,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_86\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_296 (Dense)           (None, 50)                300       \n",
            "                                                                 \n",
            " dense_297 (Dense)           (None, 20)                1020      \n",
            "                                                                 \n",
            " dense_298 (Dense)           (None, 1)                 21        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,341\n",
            "Trainable params: 1,341\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "Epoch 1/400\n",
            "60/60 [==============================] - 1s 4ms/step - loss: 1.7325 - val_loss: 1.2763\n",
            "Epoch 2/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1941 - val_loss: 1.2289\n",
            "Epoch 3/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1774 - val_loss: 1.2120\n",
            "Epoch 4/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1702 - val_loss: 1.2259\n",
            "Epoch 5/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1694 - val_loss: 1.2015\n",
            "Epoch 6/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1690 - val_loss: 1.2150\n",
            "Epoch 7/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1619 - val_loss: 1.2013\n",
            "Epoch 8/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1631 - val_loss: 1.2256\n",
            "Epoch 9/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1616 - val_loss: 1.2417\n",
            "Epoch 10/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1591 - val_loss: 1.2250\n",
            "Epoch 11/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1593 - val_loss: 1.2126\n",
            "Epoch 12/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1575 - val_loss: 1.2223\n",
            "Epoch 13/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1524 - val_loss: 1.2279\n",
            "Epoch 14/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1554 - val_loss: 1.2474\n",
            "Epoch 15/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1547 - val_loss: 1.2280\n",
            "Epoch 16/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1514 - val_loss: 1.2085\n",
            "Epoch 17/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1517 - val_loss: 1.2197\n",
            "Epoch 18/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1472 - val_loss: 1.2271\n",
            "Epoch 19/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1509 - val_loss: 1.2182\n",
            "Epoch 20/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1490 - val_loss: 1.2246\n",
            "Epoch 21/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1520 - val_loss: 1.2236\n",
            "Epoch 22/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1481 - val_loss: 1.2284\n",
            "Epoch 23/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1489 - val_loss: 1.2186\n",
            "Epoch 24/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1479 - val_loss: 1.2431\n",
            "Epoch 25/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1468 - val_loss: 1.2212\n",
            "Epoch 26/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1469 - val_loss: 1.2107\n",
            "Epoch 27/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1482 - val_loss: 1.2231\n",
            "Epoch 28/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1485 - val_loss: 1.2157\n",
            "Epoch 29/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1445 - val_loss: 1.2199\n",
            "Epoch 30/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1454 - val_loss: 1.2319\n",
            "Epoch 31/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1430 - val_loss: 1.2342\n",
            "Epoch 32/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1442 - val_loss: 1.2488\n",
            "Epoch 33/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1428 - val_loss: 1.2325\n",
            "Epoch 34/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1420 - val_loss: 1.2293\n",
            "Epoch 35/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1442 - val_loss: 1.2348\n",
            "Epoch 36/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1415 - val_loss: 1.2174\n",
            "Epoch 37/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1384 - val_loss: 1.2470\n",
            "Epoch 38/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1401 - val_loss: 1.2406\n",
            "Epoch 39/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1433 - val_loss: 1.2567\n",
            "Epoch 40/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1423 - val_loss: 1.2300\n",
            "Epoch 41/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1402 - val_loss: 1.2688\n",
            "Epoch 42/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1403 - val_loss: 1.2207\n",
            "Epoch 43/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1406 - val_loss: 1.2187\n",
            "Epoch 44/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1422 - val_loss: 1.2228\n",
            "Epoch 45/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1371 - val_loss: 1.2233\n",
            "Epoch 46/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1384 - val_loss: 1.2413\n",
            "Epoch 47/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1368 - val_loss: 1.2312\n",
            "Epoch 48/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1367 - val_loss: 1.2475\n",
            "Epoch 49/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1360 - val_loss: 1.2363\n",
            "Epoch 50/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1348 - val_loss: 1.2472\n",
            "Epoch 51/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1405 - val_loss: 1.2358\n",
            "Epoch 52/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1368 - val_loss: 1.2419\n",
            "Epoch 53/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1347 - val_loss: 1.2158\n",
            "Epoch 54/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1326 - val_loss: 1.2259\n",
            "Epoch 55/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1381 - val_loss: 1.2535\n",
            "Epoch 56/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1349 - val_loss: 1.2219\n",
            "Epoch 57/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1347 - val_loss: 1.2347\n",
            "Epoch 58/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1317 - val_loss: 1.2465\n",
            "Epoch 59/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1336 - val_loss: 1.2230\n",
            "Epoch 60/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1328 - val_loss: 1.2224\n",
            "Epoch 61/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1319 - val_loss: 1.2405\n",
            "Epoch 62/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1337 - val_loss: 1.2528\n",
            "Epoch 63/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1313 - val_loss: 1.2694\n",
            "Epoch 64/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1295 - val_loss: 1.2211\n",
            "Epoch 65/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1290 - val_loss: 1.2239\n",
            "Epoch 66/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1311 - val_loss: 1.2299\n",
            "Epoch 67/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1301 - val_loss: 1.2325\n",
            "Epoch 68/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1276 - val_loss: 1.2314\n",
            "Epoch 69/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1284 - val_loss: 1.2726\n",
            "Epoch 70/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1300 - val_loss: 1.2199\n",
            "Epoch 71/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1291 - val_loss: 1.2486\n",
            "Epoch 72/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1276 - val_loss: 1.2375\n",
            "Epoch 73/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1322 - val_loss: 1.2308\n",
            "Epoch 74/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1266 - val_loss: 1.2373\n",
            "Epoch 75/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1223 - val_loss: 1.2585\n",
            "Epoch 76/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1275 - val_loss: 1.2206\n",
            "Epoch 77/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1250 - val_loss: 1.2496\n",
            "Epoch 78/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1271 - val_loss: 1.2242\n",
            "Epoch 79/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1289 - val_loss: 1.2163\n",
            "Epoch 80/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1270 - val_loss: 1.2327\n",
            "Epoch 81/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1268 - val_loss: 1.2208\n",
            "Epoch 82/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1243 - val_loss: 1.2227\n",
            "Epoch 83/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1233 - val_loss: 1.2289\n",
            "Epoch 84/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1232 - val_loss: 1.2455\n",
            "Epoch 85/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1240 - val_loss: 1.2404\n",
            "Epoch 86/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1231 - val_loss: 1.2282\n",
            "Epoch 87/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1219 - val_loss: 1.2467\n",
            "Epoch 88/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1186 - val_loss: 1.2284\n",
            "Epoch 89/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1191 - val_loss: 1.2329\n",
            "Epoch 90/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1190 - val_loss: 1.2541\n",
            "Epoch 91/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1212 - val_loss: 1.2433\n",
            "Epoch 92/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1235 - val_loss: 1.2485\n",
            "Epoch 93/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1179 - val_loss: 1.2598\n",
            "Epoch 94/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1177 - val_loss: 1.2506\n",
            "Epoch 95/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1190 - val_loss: 1.2547\n",
            "Epoch 96/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1204 - val_loss: 1.2473\n",
            "Epoch 97/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1170 - val_loss: 1.2765\n",
            "Epoch 98/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1217 - val_loss: 1.2470\n",
            "Epoch 99/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1184 - val_loss: 1.2373\n",
            "Epoch 100/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1191 - val_loss: 1.2635\n",
            "Epoch 101/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1158 - val_loss: 1.2313\n",
            "Epoch 102/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1179 - val_loss: 1.2647\n",
            "Epoch 103/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1176 - val_loss: 1.2232\n",
            "Epoch 104/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1148 - val_loss: 1.2473\n",
            "Epoch 105/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1154 - val_loss: 1.2652\n",
            "Epoch 106/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1141 - val_loss: 1.2292\n",
            "Epoch 107/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1125 - val_loss: 1.2898\n",
            "Epoch 108/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1128 - val_loss: 1.2512\n",
            "Epoch 109/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1116 - val_loss: 1.2986\n",
            "Epoch 110/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1092 - val_loss: 1.3040\n",
            "Epoch 111/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1148 - val_loss: 1.2326\n",
            "Epoch 112/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1127 - val_loss: 1.2350\n",
            "Epoch 113/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1125 - val_loss: 1.2337\n",
            "Epoch 114/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1091 - val_loss: 1.2613\n",
            "Epoch 115/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1096 - val_loss: 1.2366\n",
            "Epoch 116/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1077 - val_loss: 1.2956\n",
            "Epoch 117/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1089 - val_loss: 1.2384\n",
            "Epoch 118/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1112 - val_loss: 1.2342\n",
            "Epoch 119/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1075 - val_loss: 1.2732\n",
            "Epoch 120/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1127 - val_loss: 1.2548\n",
            "Epoch 121/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1082 - val_loss: 1.2387\n",
            "Epoch 122/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1095 - val_loss: 1.2737\n",
            "Epoch 123/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1117 - val_loss: 1.2413\n",
            "Epoch 124/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1040 - val_loss: 1.2490\n",
            "Epoch 125/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1052 - val_loss: 1.2472\n",
            "Epoch 126/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1070 - val_loss: 1.2285\n",
            "Epoch 127/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1085 - val_loss: 1.2385\n",
            "Epoch 128/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1063 - val_loss: 1.3202\n",
            "Epoch 129/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1074 - val_loss: 1.2860\n",
            "Epoch 130/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1044 - val_loss: 1.2494\n",
            "Epoch 131/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1061 - val_loss: 1.2366\n",
            "Epoch 132/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1067 - val_loss: 1.2406\n",
            "Epoch 133/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1069 - val_loss: 1.2341\n",
            "Epoch 134/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1094 - val_loss: 1.2385\n",
            "Epoch 135/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1005 - val_loss: 1.2256\n",
            "Epoch 136/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1080 - val_loss: 1.2430\n",
            "Epoch 137/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1068 - val_loss: 1.2506\n",
            "Epoch 138/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1037 - val_loss: 1.2613\n",
            "Epoch 139/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1010 - val_loss: 1.2572\n",
            "Epoch 140/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1031 - val_loss: 1.2632\n",
            "Epoch 141/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1043 - val_loss: 1.2437\n",
            "Epoch 142/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1018 - val_loss: 1.2398\n",
            "Epoch 143/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0994 - val_loss: 1.2536\n",
            "Epoch 144/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1011 - val_loss: 1.2409\n",
            "Epoch 145/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1015 - val_loss: 1.2335\n",
            "Epoch 146/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0994 - val_loss: 1.2333\n",
            "Epoch 147/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0984 - val_loss: 1.2965\n",
            "Epoch 148/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1020 - val_loss: 1.2731\n",
            "Epoch 149/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0975 - val_loss: 1.2525\n",
            "Epoch 150/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0947 - val_loss: 1.2391\n",
            "Epoch 151/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0962 - val_loss: 1.2550\n",
            "Epoch 152/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0943 - val_loss: 1.2402\n",
            "Epoch 153/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0972 - val_loss: 1.2241\n",
            "Epoch 154/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0952 - val_loss: 1.2310\n",
            "Epoch 155/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0967 - val_loss: 1.2376\n",
            "Epoch 156/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0985 - val_loss: 1.2294\n",
            "Epoch 157/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0991 - val_loss: 1.2474\n",
            "Epoch 158/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0940 - val_loss: 1.2372\n",
            "Epoch 159/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0960 - val_loss: 1.2298\n",
            "Epoch 160/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0980 - val_loss: 1.2317\n",
            "Epoch 161/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0919 - val_loss: 1.2460\n",
            "Epoch 162/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0916 - val_loss: 1.2306\n",
            "Epoch 163/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0942 - val_loss: 1.2689\n",
            "Epoch 164/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0914 - val_loss: 1.2410\n",
            "Epoch 165/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0918 - val_loss: 1.2277\n",
            "Epoch 166/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0921 - val_loss: 1.2423\n",
            "Epoch 167/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0933 - val_loss: 1.2388\n",
            "Epoch 168/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0904 - val_loss: 1.2637\n",
            "Epoch 169/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0915 - val_loss: 1.2506\n",
            "Epoch 170/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0869 - val_loss: 1.2783\n",
            "Epoch 171/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0874 - val_loss: 1.2435\n",
            "Epoch 172/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0832 - val_loss: 1.2920\n",
            "Epoch 173/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0866 - val_loss: 1.2993\n",
            "Epoch 174/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0851 - val_loss: 1.2776\n",
            "Epoch 175/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0910 - val_loss: 1.3275\n",
            "Epoch 176/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0873 - val_loss: 1.2198\n",
            "Epoch 177/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0942 - val_loss: 1.2436\n",
            "Epoch 178/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0904 - val_loss: 1.2495\n",
            "Epoch 179/400\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 1.0874 - val_loss: 1.2425\n",
            "Epoch 180/400\n",
            "60/60 [==============================] - 1s 10ms/step - loss: 1.0959 - val_loss: 1.2799\n",
            "Epoch 181/400\n",
            "60/60 [==============================] - 0s 5ms/step - loss: 1.0926 - val_loss: 1.2320\n",
            "Epoch 182/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0849 - val_loss: 1.2449\n",
            "Epoch 183/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0883 - val_loss: 1.2484\n",
            "Epoch 184/400\n",
            "60/60 [==============================] - 0s 7ms/step - loss: 1.0858 - val_loss: 1.2595\n",
            "Epoch 185/400\n",
            "60/60 [==============================] - 1s 9ms/step - loss: 1.0868 - val_loss: 1.2515\n",
            "Epoch 186/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0894 - val_loss: 1.2607\n",
            "Epoch 187/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0881 - val_loss: 1.2487\n",
            "Epoch 188/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0845 - val_loss: 1.2569\n",
            "Epoch 189/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0833 - val_loss: 1.3201\n",
            "Epoch 190/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0907 - val_loss: 1.2658\n",
            "Epoch 191/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0823 - val_loss: 1.2465\n",
            "Epoch 192/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0860 - val_loss: 1.2322\n",
            "Epoch 193/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0815 - val_loss: 1.2571\n",
            "Epoch 194/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0830 - val_loss: 1.2604\n",
            "Epoch 195/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0868 - val_loss: 1.2347\n",
            "Epoch 196/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0759 - val_loss: 1.2983\n",
            "Epoch 197/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0847 - val_loss: 1.3258\n",
            "Epoch 198/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0788 - val_loss: 1.2446\n",
            "Epoch 199/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0866 - val_loss: 1.2704\n",
            "Epoch 200/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0721 - val_loss: 1.3095\n",
            "Epoch 201/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0859 - val_loss: 1.2267\n",
            "Epoch 202/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0862 - val_loss: 1.2824\n",
            "Epoch 203/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0774 - val_loss: 1.2696\n",
            "Epoch 204/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0828 - val_loss: 1.3032\n",
            "Epoch 205/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0790 - val_loss: 1.2147\n",
            "Epoch 206/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0824 - val_loss: 1.2926\n",
            "Epoch 207/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0797 - val_loss: 1.3504\n",
            "Epoch 208/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0755 - val_loss: 1.2618\n",
            "Epoch 209/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0754 - val_loss: 1.2165\n",
            "Epoch 210/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0748 - val_loss: 1.2719\n",
            "Epoch 211/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0853 - val_loss: 1.2591\n",
            "Epoch 212/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0790 - val_loss: 1.2977\n",
            "Epoch 213/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0790 - val_loss: 1.2467\n",
            "Epoch 214/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0784 - val_loss: 1.2560\n",
            "Epoch 215/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0742 - val_loss: 1.2437\n",
            "Epoch 216/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0697 - val_loss: 1.2571\n",
            "Epoch 217/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0812 - val_loss: 1.2757\n",
            "Epoch 218/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0721 - val_loss: 1.2437\n",
            "Epoch 219/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0737 - val_loss: 1.2606\n",
            "Epoch 220/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0755 - val_loss: 1.2989\n",
            "Epoch 221/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0749 - val_loss: 1.2702\n",
            "Epoch 222/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0723 - val_loss: 1.2769\n",
            "Epoch 223/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0725 - val_loss: 1.2406\n",
            "Epoch 224/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0738 - val_loss: 1.2439\n",
            "Epoch 225/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0739 - val_loss: 1.2620\n",
            "Epoch 226/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0724 - val_loss: 1.2484\n",
            "Epoch 227/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0675 - val_loss: 1.2957\n",
            "Epoch 228/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0757 - val_loss: 1.2784\n",
            "Epoch 229/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0754 - val_loss: 1.2685\n",
            "Epoch 230/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0734 - val_loss: 1.2587\n",
            "Epoch 231/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0678 - val_loss: 1.3339\n",
            "Epoch 232/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0764 - val_loss: 1.2664\n",
            "Epoch 233/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0687 - val_loss: 1.2683\n",
            "Epoch 234/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0803 - val_loss: 1.2750\n",
            "Epoch 235/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0688 - val_loss: 1.2653\n",
            "Epoch 236/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0693 - val_loss: 1.2394\n",
            "Epoch 237/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0738 - val_loss: 1.2679\n",
            "Epoch 238/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0689 - val_loss: 1.2634\n",
            "Epoch 239/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0603 - val_loss: 1.2566\n",
            "Epoch 240/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0659 - val_loss: 1.2862\n",
            "Epoch 241/400\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 1.0656 - val_loss: 1.2465\n",
            "Epoch 242/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0672 - val_loss: 1.2704\n",
            "Epoch 243/400\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 1.0675 - val_loss: 1.2539\n",
            "Epoch 244/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0637 - val_loss: 1.2798\n",
            "Epoch 245/400\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 1.0709 - val_loss: 1.2519\n",
            "Epoch 246/400\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 1.0639 - val_loss: 1.2482\n",
            "Epoch 247/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0697 - val_loss: 1.2673\n",
            "Epoch 248/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0657 - val_loss: 1.3283\n",
            "Epoch 249/400\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 1.0640 - val_loss: 1.2762\n",
            "Epoch 250/400\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 1.0623 - val_loss: 1.2604\n",
            "Epoch 251/400\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 1.0629 - val_loss: 1.3481\n",
            "Epoch 252/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0676 - val_loss: 1.2792\n",
            "Epoch 253/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0679 - val_loss: 1.3406\n",
            "Epoch 254/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0606 - val_loss: 1.2863\n",
            "Epoch 255/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0650 - val_loss: 1.2756\n",
            "Epoch 256/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0630 - val_loss: 1.3607\n",
            "Epoch 257/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0660 - val_loss: 1.2575\n",
            "Epoch 258/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0594 - val_loss: 1.3054\n",
            "Epoch 259/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0614 - val_loss: 1.2323\n",
            "Epoch 260/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0606 - val_loss: 1.2600\n",
            "Epoch 261/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0628 - val_loss: 1.2310\n",
            "Epoch 262/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0694 - val_loss: 1.3071\n",
            "Epoch 263/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0648 - val_loss: 1.2584\n",
            "Epoch 264/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0563 - val_loss: 1.3531\n",
            "Epoch 265/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0587 - val_loss: 1.2634\n",
            "Epoch 266/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0519 - val_loss: 1.2516\n",
            "Epoch 267/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0601 - val_loss: 1.2677\n",
            "Epoch 268/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0582 - val_loss: 1.3101\n",
            "Epoch 269/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0638 - val_loss: 1.2644\n",
            "Epoch 270/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0666 - val_loss: 1.2548\n",
            "Epoch 271/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0510 - val_loss: 1.2470\n",
            "Epoch 272/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0516 - val_loss: 1.2569\n",
            "Epoch 273/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0506 - val_loss: 1.2781\n",
            "Epoch 274/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0607 - val_loss: 1.3648\n",
            "Epoch 275/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0556 - val_loss: 1.3136\n",
            "Epoch 276/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0605 - val_loss: 1.3115\n",
            "Epoch 277/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0558 - val_loss: 1.3035\n",
            "Epoch 278/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0631 - val_loss: 1.2971\n",
            "Epoch 279/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0571 - val_loss: 1.2495\n",
            "Epoch 280/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0561 - val_loss: 1.3539\n",
            "Epoch 281/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0546 - val_loss: 1.3842\n",
            "Epoch 282/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0563 - val_loss: 1.2537\n",
            "Epoch 283/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0562 - val_loss: 1.2482\n",
            "Epoch 284/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0542 - val_loss: 1.2850\n",
            "Epoch 285/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0627 - val_loss: 1.2532\n",
            "Epoch 286/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0568 - val_loss: 1.2883\n",
            "Epoch 287/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0465 - val_loss: 1.2763\n",
            "Epoch 288/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0598 - val_loss: 1.3186\n",
            "Epoch 289/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0465 - val_loss: 1.2891\n",
            "Epoch 290/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0513 - val_loss: 1.3086\n",
            "Epoch 291/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0523 - val_loss: 1.2694\n",
            "Epoch 292/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0541 - val_loss: 1.3142\n",
            "Epoch 293/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0514 - val_loss: 1.3250\n",
            "Epoch 294/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0489 - val_loss: 1.3529\n",
            "Epoch 295/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0512 - val_loss: 1.2550\n",
            "Epoch 296/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0459 - val_loss: 1.2895\n",
            "Epoch 297/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0346 - val_loss: 1.3162\n",
            "Epoch 298/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0558 - val_loss: 1.3590\n",
            "Epoch 299/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0527 - val_loss: 1.2631\n",
            "Epoch 300/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0468 - val_loss: 1.2591\n",
            "Epoch 301/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0451 - val_loss: 1.3040\n",
            "Epoch 302/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0398 - val_loss: 1.2706\n",
            "Epoch 303/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0538 - val_loss: 1.2577\n",
            "Epoch 304/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0516 - val_loss: 1.2342\n",
            "Epoch 305/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0498 - val_loss: 1.2834\n",
            "Epoch 306/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0516 - val_loss: 1.2492\n",
            "Epoch 307/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0529 - val_loss: 1.2701\n",
            "Epoch 308/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0446 - val_loss: 1.3117\n",
            "Epoch 309/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0476 - val_loss: 1.2551\n",
            "Epoch 310/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0506 - val_loss: 1.3029\n",
            "Epoch 311/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0524 - val_loss: 1.2545\n",
            "Epoch 312/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0487 - val_loss: 1.2486\n",
            "Epoch 313/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0452 - val_loss: 1.2818\n",
            "Epoch 314/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0575 - val_loss: 1.2366\n",
            "Epoch 315/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0523 - val_loss: 1.2970\n",
            "Epoch 316/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0516 - val_loss: 1.2523\n",
            "Epoch 317/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0524 - val_loss: 1.2956\n",
            "Epoch 318/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0507 - val_loss: 1.2368\n",
            "Epoch 319/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0381 - val_loss: 1.2441\n",
            "Epoch 320/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0410 - val_loss: 1.2542\n",
            "Epoch 321/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0374 - val_loss: 1.2680\n",
            "Epoch 322/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0421 - val_loss: 1.3444\n",
            "Epoch 323/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0428 - val_loss: 1.2358\n",
            "Epoch 324/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0428 - val_loss: 1.2412\n",
            "Epoch 325/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0409 - val_loss: 1.3367\n",
            "Epoch 326/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0458 - val_loss: 1.2646\n",
            "Epoch 327/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0497 - val_loss: 1.3688\n",
            "Epoch 328/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0469 - val_loss: 1.2671\n",
            "Epoch 329/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0351 - val_loss: 1.3224\n",
            "Epoch 330/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0474 - val_loss: 1.2824\n",
            "Epoch 331/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0489 - val_loss: 1.3101\n",
            "Epoch 332/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0463 - val_loss: 1.2450\n",
            "Epoch 333/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0461 - val_loss: 1.2896\n",
            "Epoch 334/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0341 - val_loss: 1.2502\n",
            "Epoch 335/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0410 - val_loss: 1.2795\n",
            "Epoch 336/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0380 - val_loss: 1.2484\n",
            "Epoch 337/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0393 - val_loss: 1.2818\n",
            "Epoch 338/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0376 - val_loss: 1.3201\n",
            "Epoch 339/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0438 - val_loss: 1.2814\n",
            "Epoch 340/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0382 - val_loss: 1.2718\n",
            "Epoch 341/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0396 - val_loss: 1.2852\n",
            "Epoch 342/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0380 - val_loss: 1.3007\n",
            "Epoch 343/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0464 - val_loss: 1.2887\n",
            "Epoch 344/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0395 - val_loss: 1.3033\n",
            "Epoch 345/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0463 - val_loss: 1.2849\n",
            "Epoch 346/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0455 - val_loss: 1.3468\n",
            "Epoch 347/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0489 - val_loss: 1.2913\n",
            "Epoch 348/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0499 - val_loss: 1.2906\n",
            "Epoch 349/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0399 - val_loss: 1.2496\n",
            "Epoch 350/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0406 - val_loss: 1.3136\n",
            "Epoch 351/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0385 - val_loss: 1.4365\n",
            "Epoch 352/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0453 - val_loss: 1.4094\n",
            "Epoch 353/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0418 - val_loss: 1.2630\n",
            "Epoch 354/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0284 - val_loss: 1.3330\n",
            "Epoch 355/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0275 - val_loss: 1.3468\n",
            "Epoch 356/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0335 - val_loss: 1.2690\n",
            "Epoch 357/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0342 - val_loss: 1.2616\n",
            "Epoch 358/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0345 - val_loss: 1.2608\n",
            "Epoch 359/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0304 - val_loss: 1.3873\n",
            "Epoch 360/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0354 - val_loss: 1.2713\n",
            "Epoch 361/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0260 - val_loss: 1.2495\n",
            "Epoch 362/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0312 - val_loss: 1.2671\n",
            "Epoch 363/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0291 - val_loss: 1.3253\n",
            "Epoch 364/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0275 - val_loss: 1.2943\n",
            "Epoch 365/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0312 - val_loss: 1.3102\n",
            "Epoch 366/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0352 - val_loss: 1.3697\n",
            "Epoch 367/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0224 - val_loss: 1.2397\n",
            "Epoch 368/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0372 - val_loss: 1.2617\n",
            "Epoch 369/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0357 - val_loss: 1.2535\n",
            "Epoch 370/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0246 - val_loss: 1.2932\n",
            "Epoch 371/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0208 - val_loss: 1.2840\n",
            "Epoch 372/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0317 - val_loss: 1.2718\n",
            "Epoch 373/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0275 - val_loss: 1.3472\n",
            "Epoch 374/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0418 - val_loss: 1.2428\n",
            "Epoch 375/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0212 - val_loss: 1.3473\n",
            "Epoch 376/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0416 - val_loss: 1.2973\n",
            "Epoch 377/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0276 - val_loss: 1.2820\n",
            "Epoch 378/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0356 - val_loss: 1.2959\n",
            "Epoch 379/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0424 - val_loss: 1.2970\n",
            "Epoch 380/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0239 - val_loss: 1.2689\n",
            "Epoch 381/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0262 - val_loss: 1.2846\n",
            "Epoch 382/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0301 - val_loss: 1.3884\n",
            "Epoch 383/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0301 - val_loss: 1.2695\n",
            "Epoch 384/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0320 - val_loss: 1.3218\n",
            "Epoch 385/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0255 - val_loss: 1.3432\n",
            "Epoch 386/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0276 - val_loss: 1.3416\n",
            "Epoch 387/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0237 - val_loss: 1.3575\n",
            "Epoch 388/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0269 - val_loss: 1.3617\n",
            "Epoch 389/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0236 - val_loss: 1.2784\n",
            "Epoch 390/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0197 - val_loss: 1.3533\n",
            "Epoch 391/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0069 - val_loss: 1.4594\n",
            "Epoch 392/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0178 - val_loss: 1.3315\n",
            "Epoch 393/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0298 - val_loss: 1.2903\n",
            "Epoch 394/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0235 - val_loss: 1.3101\n",
            "Epoch 395/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.0402 - val_loss: 1.2580\n",
            "Epoch 396/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0254 - val_loss: 1.3127\n",
            "Epoch 397/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0303 - val_loss: 1.2798\n",
            "Epoch 398/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0200 - val_loss: 1.2929\n",
            "Epoch 399/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0151 - val_loss: 1.3147\n",
            "Epoch 400/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.0280 - val_loss: 1.2858\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Evaluation of Network 4**"
      ],
      "metadata": {
        "id": "XA7dzYEIUlNQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Loss Function: Mean Squared Error (MSE)\n",
        "MSE_4 = model_4.evaluate(X_test,y_test,verbose=0)\n",
        "print(f'The mean squared error is {MSE_4}')\n",
        "#Turn test predicitions in a panda series\n",
        "test_predictions_4 = model_4.predict(X_test)\n",
        "test_predictions_4 = pd.Series(test_predictions_4.reshape(600,))\n",
        "pred_df_4 = pd.DataFrame(y_test,columns=['Test True Y'])\n",
        "pred_df_4 = pd.concat([pred_df_4,test_predictions_4],axis=1)  #axis=1 because we are joining along the columns\n",
        "pred_df_4.columns = ['Test True Y','Model Predictions']\n",
        "pred_df_4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "outputId": "2c3f4c1f-2210-4d9f-f76e-ce94315afe8b",
        "id": "ClNHw3FzUlNQ"
      },
      "execution_count": 248,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The mean squared error is 0.9419118165969849\n",
            "19/19 [==============================] - 0s 2ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Test True Y  Model Predictions\n",
              "0       0.600000           1.734806\n",
              "1       1.931788           1.742560\n",
              "2       3.900000           2.228174\n",
              "3       2.700000           2.116862\n",
              "4       3.500000           2.527435\n",
              "..           ...                ...\n",
              "595     6.200000           2.715836\n",
              "596     4.600000           2.205907\n",
              "597     0.800000           1.725295\n",
              "598     0.600000           1.730820\n",
              "599     1.500000           1.786156\n",
              "\n",
              "[600 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ee2a98bf-0ef4-4b9c-ba21-12d30889ece2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Test True Y</th>\n",
              "      <th>Model Predictions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.600000</td>\n",
              "      <td>1.734806</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.931788</td>\n",
              "      <td>1.742560</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.900000</td>\n",
              "      <td>2.228174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.700000</td>\n",
              "      <td>2.116862</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3.500000</td>\n",
              "      <td>2.527435</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>595</th>\n",
              "      <td>6.200000</td>\n",
              "      <td>2.715836</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>596</th>\n",
              "      <td>4.600000</td>\n",
              "      <td>2.205907</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>597</th>\n",
              "      <td>0.800000</td>\n",
              "      <td>1.725295</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598</th>\n",
              "      <td>0.600000</td>\n",
              "      <td>1.730820</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599</th>\n",
              "      <td>1.500000</td>\n",
              "      <td>1.786156</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>600 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ee2a98bf-0ef4-4b9c-ba21-12d30889ece2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ee2a98bf-0ef4-4b9c-ba21-12d30889ece2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ee2a98bf-0ef4-4b9c-ba21-12d30889ece2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 248
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Scatter Plot to compare the true and the predicted outputs**"
      ],
      "metadata": {
        "id": "pTzF5Pa6UlNR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.scatterplot(x='Test True Y', y = 'Model Predictions', data = pred_df_4)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "outputId": "ddb52f3a-48c6-45cb-ab50-52c3cf89a935",
        "id": "c1pV88n8UlNR"
      },
      "execution_count": 249,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f7e87859610>"
            ]
          },
          "metadata": {},
          "execution_count": 249
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# list all data in history\n",
        "print(history_4.history.keys()) \n",
        "# summarize history for loss\n",
        "plt.plot(history_4.history['loss'])\n",
        "plt.plot(history_4.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'val'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "outputId": "dcea838f-3419-4b87-8ce9-cdc8690678b9",
        "id": "YdmFOBEQUlNS"
      },
      "execution_count": 250,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['loss', 'val_loss'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Definition and Training of Network 4 with Regularization L2**"
      ],
      "metadata": {
        "id": "Glf5VWq_GOwd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "input_dim = X_train.shape[1]    #entrada tem dimensão 12, isto é, 12 nós de entrada\n",
        "\n",
        "model_4_reg = Sequential()\n",
        "\n",
        "model_4_reg.add(Dense(50,input_shape=(input_dim,),activation=LeakyReLU(alpha=0.1),kernel_regularizer=regularizers.l2(l=0.01)))  #hidden layer\n",
        "model_4_reg.add(Dense(20,activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "model_4_reg.add(Dense(1, activation=LeakyReLU(alpha=0.1)))                        #outuput layer\n",
        "\n",
        "model_4_reg.compile(optimizer= 'SGD' , loss='mse')\n",
        "model_4_reg.summary()\n",
        "\n",
        "history_4_reg = model_4_reg.fit(X_train_noise, y_train, validation_data = (X_val_noise,y_val), epochs=400,verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ruu_S4grGVYc",
        "outputId": "3e5f6ee8-cbef-4264-9691-7cc3111a3989"
      },
      "execution_count": 251,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_87\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_299 (Dense)           (None, 50)                300       \n",
            "                                                                 \n",
            " dense_300 (Dense)           (None, 20)                1020      \n",
            "                                                                 \n",
            " dense_301 (Dense)           (None, 1)                 21        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,341\n",
            "Trainable params: 1,341\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "Epoch 1/400\n",
            "60/60 [==============================] - 1s 6ms/step - loss: 2.1623 - val_loss: 1.3559\n",
            "Epoch 2/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.2933 - val_loss: 1.3378\n",
            "Epoch 3/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.2717 - val_loss: 1.3152\n",
            "Epoch 4/400\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 1.2675 - val_loss: 1.3214\n",
            "Epoch 5/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.2610 - val_loss: 1.3011\n",
            "Epoch 6/400\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 1.2586 - val_loss: 1.3233\n",
            "Epoch 7/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.2524 - val_loss: 1.3124\n",
            "Epoch 8/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.2538 - val_loss: 1.3014\n",
            "Epoch 9/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2465 - val_loss: 1.2925\n",
            "Epoch 10/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2454 - val_loss: 1.3068\n",
            "Epoch 11/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2424 - val_loss: 1.2851\n",
            "Epoch 12/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2415 - val_loss: 1.3067\n",
            "Epoch 13/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2353 - val_loss: 1.2839\n",
            "Epoch 14/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2327 - val_loss: 1.3149\n",
            "Epoch 15/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2339 - val_loss: 1.2872\n",
            "Epoch 16/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.2296 - val_loss: 1.2752\n",
            "Epoch 17/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2302 - val_loss: 1.3016\n",
            "Epoch 18/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2258 - val_loss: 1.2715\n",
            "Epoch 19/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2232 - val_loss: 1.2739\n",
            "Epoch 20/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2241 - val_loss: 1.2882\n",
            "Epoch 21/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2209 - val_loss: 1.2947\n",
            "Epoch 22/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2166 - val_loss: 1.2923\n",
            "Epoch 23/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.2187 - val_loss: 1.2800\n",
            "Epoch 24/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2139 - val_loss: 1.2697\n",
            "Epoch 25/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2109 - val_loss: 1.2924\n",
            "Epoch 26/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2120 - val_loss: 1.2643\n",
            "Epoch 27/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2129 - val_loss: 1.2809\n",
            "Epoch 28/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2112 - val_loss: 1.2727\n",
            "Epoch 29/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2085 - val_loss: 1.2688\n",
            "Epoch 30/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.2030 - val_loss: 1.2935\n",
            "Epoch 31/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2050 - val_loss: 1.2773\n",
            "Epoch 32/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2000 - val_loss: 1.2948\n",
            "Epoch 33/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2007 - val_loss: 1.2663\n",
            "Epoch 34/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2023 - val_loss: 1.2757\n",
            "Epoch 35/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.2000 - val_loss: 1.2630\n",
            "Epoch 36/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1964 - val_loss: 1.2855\n",
            "Epoch 37/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1970 - val_loss: 1.2587\n",
            "Epoch 38/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1953 - val_loss: 1.2600\n",
            "Epoch 39/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1937 - val_loss: 1.2542\n",
            "Epoch 40/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1918 - val_loss: 1.2639\n",
            "Epoch 41/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1881 - val_loss: 1.2772\n",
            "Epoch 42/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1893 - val_loss: 1.2488\n",
            "Epoch 43/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1906 - val_loss: 1.2653\n",
            "Epoch 44/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1885 - val_loss: 1.2600\n",
            "Epoch 45/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1897 - val_loss: 1.2660\n",
            "Epoch 46/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1869 - val_loss: 1.2566\n",
            "Epoch 47/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1876 - val_loss: 1.2425\n",
            "Epoch 48/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1833 - val_loss: 1.2638\n",
            "Epoch 49/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1856 - val_loss: 1.2341\n",
            "Epoch 50/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1824 - val_loss: 1.2398\n",
            "Epoch 51/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1840 - val_loss: 1.2497\n",
            "Epoch 52/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1833 - val_loss: 1.2391\n",
            "Epoch 53/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1813 - val_loss: 1.2471\n",
            "Epoch 54/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1821 - val_loss: 1.2377\n",
            "Epoch 55/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1789 - val_loss: 1.2539\n",
            "Epoch 56/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1799 - val_loss: 1.2301\n",
            "Epoch 57/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1799 - val_loss: 1.2308\n",
            "Epoch 58/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1771 - val_loss: 1.2294\n",
            "Epoch 59/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1784 - val_loss: 1.2381\n",
            "Epoch 60/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1764 - val_loss: 1.2477\n",
            "Epoch 61/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1778 - val_loss: 1.2489\n",
            "Epoch 62/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1767 - val_loss: 1.2335\n",
            "Epoch 63/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1733 - val_loss: 1.2416\n",
            "Epoch 64/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1718 - val_loss: 1.2370\n",
            "Epoch 65/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1725 - val_loss: 1.2370\n",
            "Epoch 66/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1687 - val_loss: 1.2902\n",
            "Epoch 67/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1734 - val_loss: 1.2295\n",
            "Epoch 68/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1730 - val_loss: 1.2375\n",
            "Epoch 69/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1710 - val_loss: 1.2431\n",
            "Epoch 70/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1722 - val_loss: 1.2542\n",
            "Epoch 71/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1717 - val_loss: 1.2363\n",
            "Epoch 72/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1701 - val_loss: 1.2449\n",
            "Epoch 73/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1681 - val_loss: 1.2353\n",
            "Epoch 74/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1707 - val_loss: 1.2472\n",
            "Epoch 75/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1677 - val_loss: 1.2402\n",
            "Epoch 76/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1676 - val_loss: 1.2481\n",
            "Epoch 77/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1682 - val_loss: 1.2634\n",
            "Epoch 78/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1622 - val_loss: 1.2628\n",
            "Epoch 79/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1683 - val_loss: 1.2379\n",
            "Epoch 80/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1647 - val_loss: 1.2531\n",
            "Epoch 81/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1674 - val_loss: 1.2339\n",
            "Epoch 82/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1695 - val_loss: 1.2521\n",
            "Epoch 83/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1650 - val_loss: 1.2258\n",
            "Epoch 84/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1635 - val_loss: 1.2456\n",
            "Epoch 85/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1617 - val_loss: 1.2277\n",
            "Epoch 86/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1631 - val_loss: 1.2204\n",
            "Epoch 87/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1625 - val_loss: 1.2368\n",
            "Epoch 88/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1644 - val_loss: 1.2336\n",
            "Epoch 89/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1631 - val_loss: 1.2438\n",
            "Epoch 90/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1608 - val_loss: 1.2290\n",
            "Epoch 91/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1616 - val_loss: 1.2282\n",
            "Epoch 92/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1631 - val_loss: 1.2443\n",
            "Epoch 93/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1620 - val_loss: 1.2373\n",
            "Epoch 94/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1606 - val_loss: 1.2202\n",
            "Epoch 95/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1582 - val_loss: 1.2181\n",
            "Epoch 96/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1595 - val_loss: 1.2341\n",
            "Epoch 97/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1579 - val_loss: 1.2164\n",
            "Epoch 98/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1596 - val_loss: 1.2093\n",
            "Epoch 99/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1592 - val_loss: 1.2441\n",
            "Epoch 100/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1577 - val_loss: 1.2210\n",
            "Epoch 101/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1587 - val_loss: 1.2196\n",
            "Epoch 102/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1574 - val_loss: 1.2207\n",
            "Epoch 103/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1591 - val_loss: 1.2291\n",
            "Epoch 104/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1587 - val_loss: 1.2504\n",
            "Epoch 105/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1589 - val_loss: 1.2122\n",
            "Epoch 106/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1607 - val_loss: 1.2391\n",
            "Epoch 107/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1561 - val_loss: 1.2393\n",
            "Epoch 108/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1604 - val_loss: 1.2349\n",
            "Epoch 109/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1576 - val_loss: 1.2251\n",
            "Epoch 110/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1591 - val_loss: 1.2231\n",
            "Epoch 111/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1578 - val_loss: 1.2463\n",
            "Epoch 112/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1606 - val_loss: 1.2449\n",
            "Epoch 113/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1565 - val_loss: 1.2378\n",
            "Epoch 114/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1567 - val_loss: 1.2207\n",
            "Epoch 115/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1569 - val_loss: 1.2296\n",
            "Epoch 116/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1531 - val_loss: 1.2286\n",
            "Epoch 117/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1549 - val_loss: 1.2329\n",
            "Epoch 118/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1554 - val_loss: 1.2416\n",
            "Epoch 119/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1515 - val_loss: 1.2607\n",
            "Epoch 120/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1583 - val_loss: 1.2312\n",
            "Epoch 121/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1578 - val_loss: 1.2246\n",
            "Epoch 122/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1542 - val_loss: 1.2568\n",
            "Epoch 123/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1519 - val_loss: 1.2297\n",
            "Epoch 124/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1523 - val_loss: 1.2334\n",
            "Epoch 125/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1524 - val_loss: 1.2198\n",
            "Epoch 126/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1550 - val_loss: 1.2472\n",
            "Epoch 127/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1537 - val_loss: 1.2274\n",
            "Epoch 128/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1523 - val_loss: 1.2255\n",
            "Epoch 129/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1535 - val_loss: 1.2417\n",
            "Epoch 130/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1538 - val_loss: 1.2369\n",
            "Epoch 131/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1548 - val_loss: 1.2245\n",
            "Epoch 132/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1521 - val_loss: 1.2457\n",
            "Epoch 133/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1506 - val_loss: 1.2236\n",
            "Epoch 134/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1548 - val_loss: 1.2392\n",
            "Epoch 135/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1510 - val_loss: 1.2255\n",
            "Epoch 136/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1562 - val_loss: 1.2134\n",
            "Epoch 137/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1508 - val_loss: 1.2153\n",
            "Epoch 138/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1494 - val_loss: 1.2103\n",
            "Epoch 139/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1470 - val_loss: 1.2397\n",
            "Epoch 140/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1516 - val_loss: 1.2747\n",
            "Epoch 141/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1510 - val_loss: 1.2503\n",
            "Epoch 142/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1508 - val_loss: 1.2188\n",
            "Epoch 143/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1499 - val_loss: 1.2492\n",
            "Epoch 144/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1527 - val_loss: 1.2351\n",
            "Epoch 145/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1503 - val_loss: 1.2322\n",
            "Epoch 146/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1475 - val_loss: 1.2420\n",
            "Epoch 147/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1488 - val_loss: 1.2181\n",
            "Epoch 148/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1482 - val_loss: 1.2131\n",
            "Epoch 149/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1493 - val_loss: 1.2446\n",
            "Epoch 150/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1505 - val_loss: 1.2426\n",
            "Epoch 151/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1506 - val_loss: 1.2569\n",
            "Epoch 152/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1496 - val_loss: 1.2315\n",
            "Epoch 153/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1486 - val_loss: 1.2258\n",
            "Epoch 154/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1463 - val_loss: 1.2661\n",
            "Epoch 155/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1496 - val_loss: 1.2721\n",
            "Epoch 156/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1433 - val_loss: 1.2101\n",
            "Epoch 157/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1475 - val_loss: 1.2120\n",
            "Epoch 158/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1496 - val_loss: 1.2511\n",
            "Epoch 159/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1462 - val_loss: 1.2221\n",
            "Epoch 160/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1527 - val_loss: 1.2512\n",
            "Epoch 161/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1515 - val_loss: 1.2572\n",
            "Epoch 162/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1468 - val_loss: 1.2121\n",
            "Epoch 163/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1534 - val_loss: 1.2258\n",
            "Epoch 164/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1497 - val_loss: 1.2240\n",
            "Epoch 165/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1474 - val_loss: 1.2397\n",
            "Epoch 166/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1505 - val_loss: 1.2260\n",
            "Epoch 167/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1427 - val_loss: 1.2426\n",
            "Epoch 168/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1476 - val_loss: 1.2385\n",
            "Epoch 169/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1466 - val_loss: 1.2868\n",
            "Epoch 170/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1495 - val_loss: 1.2244\n",
            "Epoch 171/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1481 - val_loss: 1.2316\n",
            "Epoch 172/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1500 - val_loss: 1.2231\n",
            "Epoch 173/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1451 - val_loss: 1.2416\n",
            "Epoch 174/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1467 - val_loss: 1.2490\n",
            "Epoch 175/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1462 - val_loss: 1.2265\n",
            "Epoch 176/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1449 - val_loss: 1.2289\n",
            "Epoch 177/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1459 - val_loss: 1.2350\n",
            "Epoch 178/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1443 - val_loss: 1.2414\n",
            "Epoch 179/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1461 - val_loss: 1.2439\n",
            "Epoch 180/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1487 - val_loss: 1.2289\n",
            "Epoch 181/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1451 - val_loss: 1.2070\n",
            "Epoch 182/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1429 - val_loss: 1.2220\n",
            "Epoch 183/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1452 - val_loss: 1.2204\n",
            "Epoch 184/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1438 - val_loss: 1.2332\n",
            "Epoch 185/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1472 - val_loss: 1.2442\n",
            "Epoch 186/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1460 - val_loss: 1.2529\n",
            "Epoch 187/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1444 - val_loss: 1.2396\n",
            "Epoch 188/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1418 - val_loss: 1.2488\n",
            "Epoch 189/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1450 - val_loss: 1.2223\n",
            "Epoch 190/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1425 - val_loss: 1.2443\n",
            "Epoch 191/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1462 - val_loss: 1.2471\n",
            "Epoch 192/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1389 - val_loss: 1.2118\n",
            "Epoch 193/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1428 - val_loss: 1.2437\n",
            "Epoch 194/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1470 - val_loss: 1.2485\n",
            "Epoch 195/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1474 - val_loss: 1.2413\n",
            "Epoch 196/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1411 - val_loss: 1.2416\n",
            "Epoch 197/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1405 - val_loss: 1.2209\n",
            "Epoch 198/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1439 - val_loss: 1.2400\n",
            "Epoch 199/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1408 - val_loss: 1.2074\n",
            "Epoch 200/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1397 - val_loss: 1.2892\n",
            "Epoch 201/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1493 - val_loss: 1.2339\n",
            "Epoch 202/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1437 - val_loss: 1.2339\n",
            "Epoch 203/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1440 - val_loss: 1.2671\n",
            "Epoch 204/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1435 - val_loss: 1.2097\n",
            "Epoch 205/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1449 - val_loss: 1.2240\n",
            "Epoch 206/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1458 - val_loss: 1.2222\n",
            "Epoch 207/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1456 - val_loss: 1.2412\n",
            "Epoch 208/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1445 - val_loss: 1.2237\n",
            "Epoch 209/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1456 - val_loss: 1.2441\n",
            "Epoch 210/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1418 - val_loss: 1.2212\n",
            "Epoch 211/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1403 - val_loss: 1.2507\n",
            "Epoch 212/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1438 - val_loss: 1.2274\n",
            "Epoch 213/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1435 - val_loss: 1.2265\n",
            "Epoch 214/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1435 - val_loss: 1.2082\n",
            "Epoch 215/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1440 - val_loss: 1.2322\n",
            "Epoch 216/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1418 - val_loss: 1.2365\n",
            "Epoch 217/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1413 - val_loss: 1.3011\n",
            "Epoch 218/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1444 - val_loss: 1.2744\n",
            "Epoch 219/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1434 - val_loss: 1.2437\n",
            "Epoch 220/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1417 - val_loss: 1.2114\n",
            "Epoch 221/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1406 - val_loss: 1.2400\n",
            "Epoch 222/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1409 - val_loss: 1.2387\n",
            "Epoch 223/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1445 - val_loss: 1.2547\n",
            "Epoch 224/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1401 - val_loss: 1.2146\n",
            "Epoch 225/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1359 - val_loss: 1.2475\n",
            "Epoch 226/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1434 - val_loss: 1.2477\n",
            "Epoch 227/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1365 - val_loss: 1.2257\n",
            "Epoch 228/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1418 - val_loss: 1.2301\n",
            "Epoch 229/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1405 - val_loss: 1.2540\n",
            "Epoch 230/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1455 - val_loss: 1.2116\n",
            "Epoch 231/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1387 - val_loss: 1.2235\n",
            "Epoch 232/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1416 - val_loss: 1.2495\n",
            "Epoch 233/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1382 - val_loss: 1.2143\n",
            "Epoch 234/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1394 - val_loss: 1.2659\n",
            "Epoch 235/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1422 - val_loss: 1.2333\n",
            "Epoch 236/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1392 - val_loss: 1.2672\n",
            "Epoch 237/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1341 - val_loss: 1.2557\n",
            "Epoch 238/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1424 - val_loss: 1.3283\n",
            "Epoch 239/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1433 - val_loss: 1.2339\n",
            "Epoch 240/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1417 - val_loss: 1.2331\n",
            "Epoch 241/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1407 - val_loss: 1.2320\n",
            "Epoch 242/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1366 - val_loss: 1.2403\n",
            "Epoch 243/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1455 - val_loss: 1.2451\n",
            "Epoch 244/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1360 - val_loss: 1.2164\n",
            "Epoch 245/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1363 - val_loss: 1.2392\n",
            "Epoch 246/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1401 - val_loss: 1.2197\n",
            "Epoch 247/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1374 - val_loss: 1.2388\n",
            "Epoch 248/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1375 - val_loss: 1.2378\n",
            "Epoch 249/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1412 - val_loss: 1.2285\n",
            "Epoch 250/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1335 - val_loss: 1.2129\n",
            "Epoch 251/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1390 - val_loss: 1.2422\n",
            "Epoch 252/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1364 - val_loss: 1.2916\n",
            "Epoch 253/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1349 - val_loss: 1.2186\n",
            "Epoch 254/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1291 - val_loss: 1.2553\n",
            "Epoch 255/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1335 - val_loss: 1.2259\n",
            "Epoch 256/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1376 - val_loss: 1.2301\n",
            "Epoch 257/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1377 - val_loss: 1.2055\n",
            "Epoch 258/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1386 - val_loss: 1.2649\n",
            "Epoch 259/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1380 - val_loss: 1.2588\n",
            "Epoch 260/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1379 - val_loss: 1.2298\n",
            "Epoch 261/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1340 - val_loss: 1.3324\n",
            "Epoch 262/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1397 - val_loss: 1.2197\n",
            "Epoch 263/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1341 - val_loss: 1.2304\n",
            "Epoch 264/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1341 - val_loss: 1.2486\n",
            "Epoch 265/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1379 - val_loss: 1.2060\n",
            "Epoch 266/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1368 - val_loss: 1.2092\n",
            "Epoch 267/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1427 - val_loss: 1.2337\n",
            "Epoch 268/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1333 - val_loss: 1.2644\n",
            "Epoch 269/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1350 - val_loss: 1.2701\n",
            "Epoch 270/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1403 - val_loss: 1.2946\n",
            "Epoch 271/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1350 - val_loss: 1.2260\n",
            "Epoch 272/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1397 - val_loss: 1.2392\n",
            "Epoch 273/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1326 - val_loss: 1.2292\n",
            "Epoch 274/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1360 - val_loss: 1.2112\n",
            "Epoch 275/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1357 - val_loss: 1.2422\n",
            "Epoch 276/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1353 - val_loss: 1.2202\n",
            "Epoch 277/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1368 - val_loss: 1.2528\n",
            "Epoch 278/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1336 - val_loss: 1.2358\n",
            "Epoch 279/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1327 - val_loss: 1.2452\n",
            "Epoch 280/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1349 - val_loss: 1.2612\n",
            "Epoch 281/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1341 - val_loss: 1.2280\n",
            "Epoch 282/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1375 - val_loss: 1.2319\n",
            "Epoch 283/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1358 - val_loss: 1.2296\n",
            "Epoch 284/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1326 - val_loss: 1.2518\n",
            "Epoch 285/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1300 - val_loss: 1.2084\n",
            "Epoch 286/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1386 - val_loss: 1.2470\n",
            "Epoch 287/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1352 - val_loss: 1.2151\n",
            "Epoch 288/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1364 - val_loss: 1.2197\n",
            "Epoch 289/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1335 - val_loss: 1.2965\n",
            "Epoch 290/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1344 - val_loss: 1.2542\n",
            "Epoch 291/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1327 - val_loss: 1.2578\n",
            "Epoch 292/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1317 - val_loss: 1.3157\n",
            "Epoch 293/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1368 - val_loss: 1.3306\n",
            "Epoch 294/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1354 - val_loss: 1.2229\n",
            "Epoch 295/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1337 - val_loss: 1.2258\n",
            "Epoch 296/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1386 - val_loss: 1.2366\n",
            "Epoch 297/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1323 - val_loss: 1.2665\n",
            "Epoch 298/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1273 - val_loss: 1.2201\n",
            "Epoch 299/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1326 - val_loss: 1.2237\n",
            "Epoch 300/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1308 - val_loss: 1.2655\n",
            "Epoch 301/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1359 - val_loss: 1.2224\n",
            "Epoch 302/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1359 - val_loss: 1.2803\n",
            "Epoch 303/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1364 - val_loss: 1.2933\n",
            "Epoch 304/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1328 - val_loss: 1.2670\n",
            "Epoch 305/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1303 - val_loss: 1.2699\n",
            "Epoch 306/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1318 - val_loss: 1.2245\n",
            "Epoch 307/400\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 1.1303 - val_loss: 1.2174\n",
            "Epoch 308/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1303 - val_loss: 1.2134\n",
            "Epoch 309/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1331 - val_loss: 1.2482\n",
            "Epoch 310/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1292 - val_loss: 1.2642\n",
            "Epoch 311/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1354 - val_loss: 1.2537\n",
            "Epoch 312/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1389 - val_loss: 1.2553\n",
            "Epoch 313/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1288 - val_loss: 1.2280\n",
            "Epoch 314/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1360 - val_loss: 1.2287\n",
            "Epoch 315/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1355 - val_loss: 1.2382\n",
            "Epoch 316/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1289 - val_loss: 1.3346\n",
            "Epoch 317/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1388 - val_loss: 1.2961\n",
            "Epoch 318/400\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 1.1331 - val_loss: 1.2925\n",
            "Epoch 319/400\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 1.1327 - val_loss: 1.2890\n",
            "Epoch 320/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1306 - val_loss: 1.3132\n",
            "Epoch 321/400\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 1.1373 - val_loss: 1.2547\n",
            "Epoch 322/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1320 - val_loss: 1.2317\n",
            "Epoch 323/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1349 - val_loss: 1.2885\n",
            "Epoch 324/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1270 - val_loss: 1.2480\n",
            "Epoch 325/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1339 - val_loss: 1.2688\n",
            "Epoch 326/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1333 - val_loss: 1.2662\n",
            "Epoch 327/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1323 - val_loss: 1.2325\n",
            "Epoch 328/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1382 - val_loss: 1.2424\n",
            "Epoch 329/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1281 - val_loss: 1.2250\n",
            "Epoch 330/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1290 - val_loss: 1.2571\n",
            "Epoch 331/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1371 - val_loss: 1.2888\n",
            "Epoch 332/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1296 - val_loss: 1.2329\n",
            "Epoch 333/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1296 - val_loss: 1.3024\n",
            "Epoch 334/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1295 - val_loss: 1.2414\n",
            "Epoch 335/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1352 - val_loss: 1.2415\n",
            "Epoch 336/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1326 - val_loss: 1.2537\n",
            "Epoch 337/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1350 - val_loss: 1.2354\n",
            "Epoch 338/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1296 - val_loss: 1.2402\n",
            "Epoch 339/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1299 - val_loss: 1.2279\n",
            "Epoch 340/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1273 - val_loss: 1.2370\n",
            "Epoch 341/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1355 - val_loss: 1.2257\n",
            "Epoch 342/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1324 - val_loss: 1.2582\n",
            "Epoch 343/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1364 - val_loss: 1.2351\n",
            "Epoch 344/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1279 - val_loss: 1.2618\n",
            "Epoch 345/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1349 - val_loss: 1.3063\n",
            "Epoch 346/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1311 - val_loss: 1.2859\n",
            "Epoch 347/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1336 - val_loss: 1.2646\n",
            "Epoch 348/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1302 - val_loss: 1.2286\n",
            "Epoch 349/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1309 - val_loss: 1.2604\n",
            "Epoch 350/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1350 - val_loss: 1.2369\n",
            "Epoch 351/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1298 - val_loss: 1.2583\n",
            "Epoch 352/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1304 - val_loss: 1.2479\n",
            "Epoch 353/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1384 - val_loss: 1.2339\n",
            "Epoch 354/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1298 - val_loss: 1.3047\n",
            "Epoch 355/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1292 - val_loss: 1.2427\n",
            "Epoch 356/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1273 - val_loss: 1.2322\n",
            "Epoch 357/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1354 - val_loss: 1.2491\n",
            "Epoch 358/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1325 - val_loss: 1.2500\n",
            "Epoch 359/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1313 - val_loss: 1.2281\n",
            "Epoch 360/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1270 - val_loss: 1.2875\n",
            "Epoch 361/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1296 - val_loss: 1.2615\n",
            "Epoch 362/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1350 - val_loss: 1.2435\n",
            "Epoch 363/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1298 - val_loss: 1.2392\n",
            "Epoch 364/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1326 - val_loss: 1.2379\n",
            "Epoch 365/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1385 - val_loss: 1.2787\n",
            "Epoch 366/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1266 - val_loss: 1.2268\n",
            "Epoch 367/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1309 - val_loss: 1.2620\n",
            "Epoch 368/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1315 - val_loss: 1.2176\n",
            "Epoch 369/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1304 - val_loss: 1.2408\n",
            "Epoch 370/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1354 - val_loss: 1.2807\n",
            "Epoch 371/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1300 - val_loss: 1.2643\n",
            "Epoch 372/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1261 - val_loss: 1.2514\n",
            "Epoch 373/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1293 - val_loss: 1.2912\n",
            "Epoch 374/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1318 - val_loss: 1.2835\n",
            "Epoch 375/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1339 - val_loss: 1.2506\n",
            "Epoch 376/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1327 - val_loss: 1.2507\n",
            "Epoch 377/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1296 - val_loss: 1.2685\n",
            "Epoch 378/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1218 - val_loss: 1.2563\n",
            "Epoch 379/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1264 - val_loss: 1.2759\n",
            "Epoch 380/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1281 - val_loss: 1.2573\n",
            "Epoch 381/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1285 - val_loss: 1.2169\n",
            "Epoch 382/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1247 - val_loss: 1.2403\n",
            "Epoch 383/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1299 - val_loss: 1.2856\n",
            "Epoch 384/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1294 - val_loss: 1.2822\n",
            "Epoch 385/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1233 - val_loss: 1.2636\n",
            "Epoch 386/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1305 - val_loss: 1.2385\n",
            "Epoch 387/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1272 - val_loss: 1.3292\n",
            "Epoch 388/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1312 - val_loss: 1.2475\n",
            "Epoch 389/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1239 - val_loss: 1.3012\n",
            "Epoch 390/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1309 - val_loss: 1.2801\n",
            "Epoch 391/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1289 - val_loss: 1.2573\n",
            "Epoch 392/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1211 - val_loss: 1.2429\n",
            "Epoch 393/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1210 - val_loss: 1.2622\n",
            "Epoch 394/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1301 - val_loss: 1.2868\n",
            "Epoch 395/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1226 - val_loss: 1.3978\n",
            "Epoch 396/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1312 - val_loss: 1.2260\n",
            "Epoch 397/400\n",
            "60/60 [==============================] - 0s 2ms/step - loss: 1.1232 - val_loss: 1.2680\n",
            "Epoch 398/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1310 - val_loss: 1.2748\n",
            "Epoch 399/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1272 - val_loss: 1.2353\n",
            "Epoch 400/400\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 1.1280 - val_loss: 1.2310\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Evaluation of Network 4 with Regularization L2"
      ],
      "metadata": {
        "id": "Z8wy1o0vG6AS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Loss Function: Mean Squared Error (MSE)\n",
        "MSE_4_reg = model_4_reg.evaluate(X_test,y_test,verbose=0)\n",
        "print(f'The mean squared error is {MSE_4_reg}')\n",
        "#Turn test predicitions in a panda series\n",
        "test_predictions_4_reg = model_4_reg.predict(X_test)\n",
        "test_predictions_4_reg = pd.Series(test_predictions_4_reg.reshape(600,))\n",
        "pred_df_4_reg = pd.DataFrame(y_test,columns=['Test True Y'])\n",
        "pred_df_4_reg = pd.concat([pred_df_4_reg,test_predictions_4_reg],axis=1)  #axis=1 because we are joining along the columns\n",
        "pred_df_4_reg.columns = ['Test True Y','Model Predictions']\n",
        "pred_df_4_reg"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "id": "NpeH4rw0HGfo",
        "outputId": "fdc78495-932b-42eb-f55d-06e449a97f6c"
      },
      "execution_count": 252,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The mean squared error is 0.9026591777801514\n",
            "19/19 [==============================] - 0s 2ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Test True Y  Model Predictions\n",
              "0       0.600000           1.826956\n",
              "1       1.931788           1.891631\n",
              "2       3.900000           2.400003\n",
              "3       2.700000           2.312219\n",
              "4       3.500000           2.628383\n",
              "..           ...                ...\n",
              "595     6.200000           2.808050\n",
              "596     4.600000           2.411245\n",
              "597     0.800000           1.882494\n",
              "598     0.600000           1.803391\n",
              "599     1.500000           1.871692\n",
              "\n",
              "[600 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-177b13b5-335a-4ec2-940f-9176f1977fa1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Test True Y</th>\n",
              "      <th>Model Predictions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.600000</td>\n",
              "      <td>1.826956</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.931788</td>\n",
              "      <td>1.891631</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.900000</td>\n",
              "      <td>2.400003</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.700000</td>\n",
              "      <td>2.312219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3.500000</td>\n",
              "      <td>2.628383</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>595</th>\n",
              "      <td>6.200000</td>\n",
              "      <td>2.808050</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>596</th>\n",
              "      <td>4.600000</td>\n",
              "      <td>2.411245</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>597</th>\n",
              "      <td>0.800000</td>\n",
              "      <td>1.882494</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598</th>\n",
              "      <td>0.600000</td>\n",
              "      <td>1.803391</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599</th>\n",
              "      <td>1.500000</td>\n",
              "      <td>1.871692</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>600 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-177b13b5-335a-4ec2-940f-9176f1977fa1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-177b13b5-335a-4ec2-940f-9176f1977fa1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-177b13b5-335a-4ec2-940f-9176f1977fa1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 252
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Scatter Plot to compare the true and the predicted outputs**"
      ],
      "metadata": {
        "id": "75eG8ITmILo5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.scatterplot(x='Test True Y', y = 'Model Predictions', data = pred_df_4_reg)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "outputId": "eb25f669-5261-41b7-cc6e-580beec3d0a6",
        "id": "nxA0YE-SILo5"
      },
      "execution_count": 253,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f7e92cccf10>"
            ]
          },
          "metadata": {},
          "execution_count": 253
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# list all data in history\n",
        "print(history_4_reg.history.keys()) \n",
        "# summarize history for loss\n",
        "plt.plot(history_4_reg.history['loss'])\n",
        "plt.plot(history_4_reg.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'val'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "outputId": "26b20d21-c81b-44fd-e3eb-e5697e2a5b30",
        "id": "Udb9jrLkILo5"
      },
      "execution_count": 254,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['loss', 'val_loss'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Definition and Training of Network 5**\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "3MQuv8IOVM9C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "input_dim = X_train.shape[1]    #entrada tem dimensão 12, isto é, 12 nós de entrada\n",
        "\n",
        "model_5 = Sequential()\n",
        "\n",
        "model_5.add(Dense(200,input_shape=(input_dim,),activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "model_5.add(Dense(100,activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "model_5.add(Dense(50,activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "model_5.add(Dense(50,activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "model_5.add(Dense(50,activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "model_5.add(Dense(1, activation=LeakyReLU(alpha=0.1)))                        #outuput layer\n",
        "\n",
        "model_5.compile(optimizer= 'sgd', loss='mse')\n",
        "#model_5.compile(optimizer= 'adam', loss='mse')\n",
        "model_5.summary()\n",
        "\n",
        "history_5 = model_5.fit(X_train, y_train, validation_data = (X_val,y_val), epochs=n_epochs,verbose=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7fc5f222-92e0-4458-e03f-5c7f760deb39",
        "id": "H7z42SnIVM9E"
      },
      "execution_count": 209,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_65\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_223 (Dense)           (None, 200)               1200      \n",
            "                                                                 \n",
            " dense_224 (Dense)           (None, 100)               20100     \n",
            "                                                                 \n",
            " dense_225 (Dense)           (None, 50)                5050      \n",
            "                                                                 \n",
            " dense_226 (Dense)           (None, 50)                2550      \n",
            "                                                                 \n",
            " dense_227 (Dense)           (None, 50)                2550      \n",
            "                                                                 \n",
            " dense_228 (Dense)           (None, 1)                 51        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 31,501\n",
            "Trainable params: 31,501\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "Epoch 1/300\n",
            "60/60 [==============================] - 1s 5ms/step - loss: 1.7370 - val_loss: 0.9177\n",
            "Epoch 2/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.7638 - val_loss: 0.6386\n",
            "Epoch 3/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.6111 - val_loss: 0.6153\n",
            "Epoch 4/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5978 - val_loss: 0.6095\n",
            "Epoch 5/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5936 - val_loss: 0.6087\n",
            "Epoch 6/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5934 - val_loss: 0.6663\n",
            "Epoch 7/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5870 - val_loss: 0.6221\n",
            "Epoch 8/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5838 - val_loss: 0.6149\n",
            "Epoch 9/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5876 - val_loss: 0.6096\n",
            "Epoch 10/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5784 - val_loss: 0.5968\n",
            "Epoch 11/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5734 - val_loss: 0.5983\n",
            "Epoch 12/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5768 - val_loss: 0.5947\n",
            "Epoch 13/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5751 - val_loss: 0.6123\n",
            "Epoch 14/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5760 - val_loss: 0.6204\n",
            "Epoch 15/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5779 - val_loss: 0.5932\n",
            "Epoch 16/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5731 - val_loss: 0.5964\n",
            "Epoch 17/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5770 - val_loss: 0.5911\n",
            "Epoch 18/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5724 - val_loss: 0.6694\n",
            "Epoch 19/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5714 - val_loss: 0.5902\n",
            "Epoch 20/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5646 - val_loss: 0.5892\n",
            "Epoch 21/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5684 - val_loss: 0.5984\n",
            "Epoch 22/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5659 - val_loss: 0.5883\n",
            "Epoch 23/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5752 - val_loss: 0.5875\n",
            "Epoch 24/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5689 - val_loss: 0.5868\n",
            "Epoch 25/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5646 - val_loss: 0.5916\n",
            "Epoch 26/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5655 - val_loss: 0.6177\n",
            "Epoch 27/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5702 - val_loss: 0.6015\n",
            "Epoch 28/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5631 - val_loss: 0.5916\n",
            "Epoch 29/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5676 - val_loss: 0.6156\n",
            "Epoch 30/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5751 - val_loss: 0.5925\n",
            "Epoch 31/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5639 - val_loss: 0.6043\n",
            "Epoch 32/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5674 - val_loss: 0.6082\n",
            "Epoch 33/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5615 - val_loss: 0.6317\n",
            "Epoch 34/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5679 - val_loss: 0.6121\n",
            "Epoch 35/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5638 - val_loss: 0.5920\n",
            "Epoch 36/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5674 - val_loss: 0.5916\n",
            "Epoch 37/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5656 - val_loss: 0.6001\n",
            "Epoch 38/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5659 - val_loss: 0.6255\n",
            "Epoch 39/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5632 - val_loss: 0.5946\n",
            "Epoch 40/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5613 - val_loss: 0.6289\n",
            "Epoch 41/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5615 - val_loss: 0.5936\n",
            "Epoch 42/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5648 - val_loss: 0.5870\n",
            "Epoch 43/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5653 - val_loss: 0.6034\n",
            "Epoch 44/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5684 - val_loss: 0.5917\n",
            "Epoch 45/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5606 - val_loss: 0.6139\n",
            "Epoch 46/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5655 - val_loss: 0.5830\n",
            "Epoch 47/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5592 - val_loss: 0.6219\n",
            "Epoch 48/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5693 - val_loss: 0.5840\n",
            "Epoch 49/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5609 - val_loss: 0.5830\n",
            "Epoch 50/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5660 - val_loss: 0.5837\n",
            "Epoch 51/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5630 - val_loss: 0.5827\n",
            "Epoch 52/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5597 - val_loss: 0.6049\n",
            "Epoch 53/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5632 - val_loss: 0.5927\n",
            "Epoch 54/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5644 - val_loss: 0.5871\n",
            "Epoch 55/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5583 - val_loss: 0.5902\n",
            "Epoch 56/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5639 - val_loss: 0.6056\n",
            "Epoch 57/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5687 - val_loss: 0.5887\n",
            "Epoch 58/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5616 - val_loss: 0.5811\n",
            "Epoch 59/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5625 - val_loss: 0.5923\n",
            "Epoch 60/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5608 - val_loss: 0.5838\n",
            "Epoch 61/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5624 - val_loss: 0.5796\n",
            "Epoch 62/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5663 - val_loss: 0.6576\n",
            "Epoch 63/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5625 - val_loss: 0.6300\n",
            "Epoch 64/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5549 - val_loss: 0.5931\n",
            "Epoch 65/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5652 - val_loss: 0.5809\n",
            "Epoch 66/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5591 - val_loss: 0.5893\n",
            "Epoch 67/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5639 - val_loss: 0.5939\n",
            "Epoch 68/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5621 - val_loss: 0.5802\n",
            "Epoch 69/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5657 - val_loss: 0.6032\n",
            "Epoch 70/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5670 - val_loss: 0.6108\n",
            "Epoch 71/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5597 - val_loss: 0.6157\n",
            "Epoch 72/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5603 - val_loss: 0.5834\n",
            "Epoch 73/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5599 - val_loss: 0.6112\n",
            "Epoch 74/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5629 - val_loss: 0.5850\n",
            "Epoch 75/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5642 - val_loss: 0.5948\n",
            "Epoch 76/300\n",
            "60/60 [==============================] - 0s 5ms/step - loss: 0.5648 - val_loss: 0.5826\n",
            "Epoch 77/300\n",
            "60/60 [==============================] - 0s 5ms/step - loss: 0.5653 - val_loss: 0.5783\n",
            "Epoch 78/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5555 - val_loss: 0.5786\n",
            "Epoch 79/300\n",
            "60/60 [==============================] - 0s 5ms/step - loss: 0.5570 - val_loss: 0.5791\n",
            "Epoch 80/300\n",
            "60/60 [==============================] - 0s 5ms/step - loss: 0.5589 - val_loss: 0.5836\n",
            "Epoch 81/300\n",
            "60/60 [==============================] - 0s 5ms/step - loss: 0.5617 - val_loss: 0.5984\n",
            "Epoch 82/300\n",
            "60/60 [==============================] - 0s 5ms/step - loss: 0.5608 - val_loss: 0.6278\n",
            "Epoch 83/300\n",
            "60/60 [==============================] - 0s 5ms/step - loss: 0.5626 - val_loss: 0.5780\n",
            "Epoch 84/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5615 - val_loss: 0.5827\n",
            "Epoch 85/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5576 - val_loss: 0.5787\n",
            "Epoch 86/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5611 - val_loss: 0.5769\n",
            "Epoch 87/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5578 - val_loss: 0.5843\n",
            "Epoch 88/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5559 - val_loss: 0.5785\n",
            "Epoch 89/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5593 - val_loss: 0.6226\n",
            "Epoch 90/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5570 - val_loss: 0.6037\n",
            "Epoch 91/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5604 - val_loss: 0.5910\n",
            "Epoch 92/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5572 - val_loss: 0.5787\n",
            "Epoch 93/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5552 - val_loss: 0.5792\n",
            "Epoch 94/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5635 - val_loss: 0.5834\n",
            "Epoch 95/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5574 - val_loss: 0.5894\n",
            "Epoch 96/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5582 - val_loss: 0.5763\n",
            "Epoch 97/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5565 - val_loss: 0.5822\n",
            "Epoch 98/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5590 - val_loss: 0.5998\n",
            "Epoch 99/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5515 - val_loss: 0.5790\n",
            "Epoch 100/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5586 - val_loss: 0.5808\n",
            "Epoch 101/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5519 - val_loss: 0.5872\n",
            "Epoch 102/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5560 - val_loss: 0.5844\n",
            "Epoch 103/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5544 - val_loss: 0.5758\n",
            "Epoch 104/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5559 - val_loss: 0.5762\n",
            "Epoch 105/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5547 - val_loss: 0.5750\n",
            "Epoch 106/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5658 - val_loss: 0.5807\n",
            "Epoch 107/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5555 - val_loss: 0.5764\n",
            "Epoch 108/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5572 - val_loss: 0.5752\n",
            "Epoch 109/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5532 - val_loss: 0.5783\n",
            "Epoch 110/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5611 - val_loss: 0.6042\n",
            "Epoch 111/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5553 - val_loss: 0.5860\n",
            "Epoch 112/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5480 - val_loss: 0.5752\n",
            "Epoch 113/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5568 - val_loss: 0.5782\n",
            "Epoch 114/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5531 - val_loss: 0.6471\n",
            "Epoch 115/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5545 - val_loss: 0.5780\n",
            "Epoch 116/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5547 - val_loss: 0.5754\n",
            "Epoch 117/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5545 - val_loss: 0.5886\n",
            "Epoch 118/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5535 - val_loss: 0.5930\n",
            "Epoch 119/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5526 - val_loss: 0.5749\n",
            "Epoch 120/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5527 - val_loss: 0.5751\n",
            "Epoch 121/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5577 - val_loss: 0.5879\n",
            "Epoch 122/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5546 - val_loss: 0.5740\n",
            "Epoch 123/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5556 - val_loss: 0.6145\n",
            "Epoch 124/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5588 - val_loss: 0.5871\n",
            "Epoch 125/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5536 - val_loss: 0.5749\n",
            "Epoch 126/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5581 - val_loss: 0.5779\n",
            "Epoch 127/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5581 - val_loss: 0.5856\n",
            "Epoch 128/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5575 - val_loss: 0.5789\n",
            "Epoch 129/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5551 - val_loss: 0.5982\n",
            "Epoch 130/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5582 - val_loss: 0.5943\n",
            "Epoch 131/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5578 - val_loss: 0.5820\n",
            "Epoch 132/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5534 - val_loss: 0.5723\n",
            "Epoch 133/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5597 - val_loss: 0.5722\n",
            "Epoch 134/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5572 - val_loss: 0.5769\n",
            "Epoch 135/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5514 - val_loss: 0.5731\n",
            "Epoch 136/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5546 - val_loss: 0.5724\n",
            "Epoch 137/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5539 - val_loss: 0.5770\n",
            "Epoch 138/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5555 - val_loss: 0.5761\n",
            "Epoch 139/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5593 - val_loss: 0.5763\n",
            "Epoch 140/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5526 - val_loss: 0.5857\n",
            "Epoch 141/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5524 - val_loss: 0.5793\n",
            "Epoch 142/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5467 - val_loss: 0.5735\n",
            "Epoch 143/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5565 - val_loss: 0.5999\n",
            "Epoch 144/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5585 - val_loss: 0.5790\n",
            "Epoch 145/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5524 - val_loss: 0.5792\n",
            "Epoch 146/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5518 - val_loss: 0.5769\n",
            "Epoch 147/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5509 - val_loss: 0.5736\n",
            "Epoch 148/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5473 - val_loss: 0.5740\n",
            "Epoch 149/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5519 - val_loss: 0.5867\n",
            "Epoch 150/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5514 - val_loss: 0.5821\n",
            "Epoch 151/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5505 - val_loss: 0.6178\n",
            "Epoch 152/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5538 - val_loss: 0.5813\n",
            "Epoch 153/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5456 - val_loss: 0.5942\n",
            "Epoch 154/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5539 - val_loss: 0.5707\n",
            "Epoch 155/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5525 - val_loss: 0.5763\n",
            "Epoch 156/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5546 - val_loss: 0.5716\n",
            "Epoch 157/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5513 - val_loss: 0.5753\n",
            "Epoch 158/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5517 - val_loss: 0.5711\n",
            "Epoch 159/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5543 - val_loss: 0.5732\n",
            "Epoch 160/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5520 - val_loss: 0.5774\n",
            "Epoch 161/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5596 - val_loss: 0.5724\n",
            "Epoch 162/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5508 - val_loss: 0.5791\n",
            "Epoch 163/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5445 - val_loss: 0.6029\n",
            "Epoch 164/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5506 - val_loss: 0.5736\n",
            "Epoch 165/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5523 - val_loss: 0.5726\n",
            "Epoch 166/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5503 - val_loss: 0.5818\n",
            "Epoch 167/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5511 - val_loss: 0.5914\n",
            "Epoch 168/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5475 - val_loss: 0.5758\n",
            "Epoch 169/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5584 - val_loss: 0.5731\n",
            "Epoch 170/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5544 - val_loss: 0.5845\n",
            "Epoch 171/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5512 - val_loss: 0.5750\n",
            "Epoch 172/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5495 - val_loss: 0.5769\n",
            "Epoch 173/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5560 - val_loss: 0.5734\n",
            "Epoch 174/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5490 - val_loss: 0.5797\n",
            "Epoch 175/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5512 - val_loss: 0.5721\n",
            "Epoch 176/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5481 - val_loss: 0.5701\n",
            "Epoch 177/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5489 - val_loss: 0.5716\n",
            "Epoch 178/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5527 - val_loss: 0.5741\n",
            "Epoch 179/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5508 - val_loss: 0.5790\n",
            "Epoch 180/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5540 - val_loss: 0.5735\n",
            "Epoch 181/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5557 - val_loss: 0.5832\n",
            "Epoch 182/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5487 - val_loss: 0.5695\n",
            "Epoch 183/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5520 - val_loss: 0.5714\n",
            "Epoch 184/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5499 - val_loss: 0.5820\n",
            "Epoch 185/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5468 - val_loss: 0.6157\n",
            "Epoch 186/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5468 - val_loss: 0.5683\n",
            "Epoch 187/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5469 - val_loss: 0.5685\n",
            "Epoch 188/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5499 - val_loss: 0.5742\n",
            "Epoch 189/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5461 - val_loss: 0.5994\n",
            "Epoch 190/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5512 - val_loss: 0.5937\n",
            "Epoch 191/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5474 - val_loss: 0.5801\n",
            "Epoch 192/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5460 - val_loss: 0.5738\n",
            "Epoch 193/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5415 - val_loss: 0.5782\n",
            "Epoch 194/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5542 - val_loss: 0.6001\n",
            "Epoch 195/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5488 - val_loss: 0.5698\n",
            "Epoch 196/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5448 - val_loss: 0.5696\n",
            "Epoch 197/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5475 - val_loss: 0.5743\n",
            "Epoch 198/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5500 - val_loss: 0.5699\n",
            "Epoch 199/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5494 - val_loss: 0.5723\n",
            "Epoch 200/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5549 - val_loss: 0.5683\n",
            "Epoch 201/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5455 - val_loss: 0.6137\n",
            "Epoch 202/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5467 - val_loss: 0.5797\n",
            "Epoch 203/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5479 - val_loss: 0.5847\n",
            "Epoch 204/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5432 - val_loss: 0.5848\n",
            "Epoch 205/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5451 - val_loss: 0.5703\n",
            "Epoch 206/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5488 - val_loss: 0.5807\n",
            "Epoch 207/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5489 - val_loss: 0.5785\n",
            "Epoch 208/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5483 - val_loss: 0.5726\n",
            "Epoch 209/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5497 - val_loss: 0.5900\n",
            "Epoch 210/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5502 - val_loss: 0.5718\n",
            "Epoch 211/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5492 - val_loss: 0.5763\n",
            "Epoch 212/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5438 - val_loss: 0.5689\n",
            "Epoch 213/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5490 - val_loss: 0.5689\n",
            "Epoch 214/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5473 - val_loss: 0.5697\n",
            "Epoch 215/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5479 - val_loss: 0.5832\n",
            "Epoch 216/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5443 - val_loss: 0.5689\n",
            "Epoch 217/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5453 - val_loss: 0.5694\n",
            "Epoch 218/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5429 - val_loss: 0.5922\n",
            "Epoch 219/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5466 - val_loss: 0.5686\n",
            "Epoch 220/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5432 - val_loss: 0.6030\n",
            "Epoch 221/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5439 - val_loss: 0.5753\n",
            "Epoch 222/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5443 - val_loss: 0.5787\n",
            "Epoch 223/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5438 - val_loss: 0.5693\n",
            "Epoch 224/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5361 - val_loss: 0.5799\n",
            "Epoch 225/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5443 - val_loss: 0.5842\n",
            "Epoch 226/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5497 - val_loss: 0.5686\n",
            "Epoch 227/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5449 - val_loss: 0.5773\n",
            "Epoch 228/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5467 - val_loss: 0.5778\n",
            "Epoch 229/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5459 - val_loss: 0.5796\n",
            "Epoch 230/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5453 - val_loss: 0.5670\n",
            "Epoch 231/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5457 - val_loss: 0.5717\n",
            "Epoch 232/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5480 - val_loss: 0.5965\n",
            "Epoch 233/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5411 - val_loss: 0.6025\n",
            "Epoch 234/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5452 - val_loss: 0.5683\n",
            "Epoch 235/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5486 - val_loss: 0.5665\n",
            "Epoch 236/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5497 - val_loss: 0.5685\n",
            "Epoch 237/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5406 - val_loss: 0.5700\n",
            "Epoch 238/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5429 - val_loss: 0.5768\n",
            "Epoch 239/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5385 - val_loss: 0.5813\n",
            "Epoch 240/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5407 - val_loss: 0.5682\n",
            "Epoch 241/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5480 - val_loss: 0.5690\n",
            "Epoch 242/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5479 - val_loss: 0.5790\n",
            "Epoch 243/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5465 - val_loss: 0.5777\n",
            "Epoch 244/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5408 - val_loss: 0.5722\n",
            "Epoch 245/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5433 - val_loss: 0.5709\n",
            "Epoch 246/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5431 - val_loss: 0.5678\n",
            "Epoch 247/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5437 - val_loss: 0.5839\n",
            "Epoch 248/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5430 - val_loss: 0.5681\n",
            "Epoch 249/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5426 - val_loss: 0.5766\n",
            "Epoch 250/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5370 - val_loss: 0.5665\n",
            "Epoch 251/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5393 - val_loss: 0.5660\n",
            "Epoch 252/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5465 - val_loss: 0.5733\n",
            "Epoch 253/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5438 - val_loss: 0.5928\n",
            "Epoch 254/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5464 - val_loss: 0.5889\n",
            "Epoch 255/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5504 - val_loss: 0.5864\n",
            "Epoch 256/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5407 - val_loss: 0.6377\n",
            "Epoch 257/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5386 - val_loss: 0.5728\n",
            "Epoch 258/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5447 - val_loss: 0.5700\n",
            "Epoch 259/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5477 - val_loss: 0.5656\n",
            "Epoch 260/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5422 - val_loss: 0.5648\n",
            "Epoch 261/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5399 - val_loss: 0.5880\n",
            "Epoch 262/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5372 - val_loss: 0.6178\n",
            "Epoch 263/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5410 - val_loss: 0.5683\n",
            "Epoch 264/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5407 - val_loss: 0.6390\n",
            "Epoch 265/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5410 - val_loss: 0.5932\n",
            "Epoch 266/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5448 - val_loss: 0.5693\n",
            "Epoch 267/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5425 - val_loss: 0.6079\n",
            "Epoch 268/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5414 - val_loss: 0.5825\n",
            "Epoch 269/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5337 - val_loss: 0.5810\n",
            "Epoch 270/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5425 - val_loss: 0.7004\n",
            "Epoch 271/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5461 - val_loss: 0.5934\n",
            "Epoch 272/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5407 - val_loss: 0.5687\n",
            "Epoch 273/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5442 - val_loss: 0.5660\n",
            "Epoch 274/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5440 - val_loss: 0.6054\n",
            "Epoch 275/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5411 - val_loss: 0.5795\n",
            "Epoch 276/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5345 - val_loss: 0.6026\n",
            "Epoch 277/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5433 - val_loss: 0.5908\n",
            "Epoch 278/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5420 - val_loss: 0.5719\n",
            "Epoch 279/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5358 - val_loss: 0.5658\n",
            "Epoch 280/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5444 - val_loss: 0.6041\n",
            "Epoch 281/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5373 - val_loss: 0.5836\n",
            "Epoch 282/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5468 - val_loss: 0.5906\n",
            "Epoch 283/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5427 - val_loss: 0.5656\n",
            "Epoch 284/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5416 - val_loss: 0.5689\n",
            "Epoch 285/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5498 - val_loss: 0.5689\n",
            "Epoch 286/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5407 - val_loss: 0.5734\n",
            "Epoch 287/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5395 - val_loss: 0.5641\n",
            "Epoch 288/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5452 - val_loss: 0.5666\n",
            "Epoch 289/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5416 - val_loss: 0.5736\n",
            "Epoch 290/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5369 - val_loss: 0.5725\n",
            "Epoch 291/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5438 - val_loss: 0.5967\n",
            "Epoch 292/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5450 - val_loss: 0.5747\n",
            "Epoch 293/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5363 - val_loss: 0.5689\n",
            "Epoch 294/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5399 - val_loss: 0.5834\n",
            "Epoch 295/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5481 - val_loss: 0.6325\n",
            "Epoch 296/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5388 - val_loss: 0.5876\n",
            "Epoch 297/300\n",
            "60/60 [==============================] - 0s 4ms/step - loss: 0.5401 - val_loss: 0.5875\n",
            "Epoch 298/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5361 - val_loss: 0.5840\n",
            "Epoch 299/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5372 - val_loss: 0.5685\n",
            "Epoch 300/300\n",
            "60/60 [==============================] - 0s 3ms/step - loss: 0.5383 - val_loss: 0.5832\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Evaluation of Network 5**\n",
        "\n"
      ],
      "metadata": {
        "id": "Xi-8yD3kVM9E"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Loss Function: Mean Squared Error (MSE)\n",
        "MSE_5 = model_5.evaluate(X_test,y_test,verbose=0)\n",
        "print(f'The mean squared error is {MSE_5}')\n",
        "#Turn test predicitions in a panda series\n",
        "test_predictions_5 = model_5.predict(X_test)\n",
        "test_predictions_5 = pd.Series(test_predictions_5.reshape(600,))\n",
        "pred_df_5 = pd.DataFrame(y_test,columns=['Test True Y'])\n",
        "pred_df_5 = pd.concat([pred_df_5,test_predictions_5],axis=1)  #axis=1 because we are joining along the columns\n",
        "pred_df_5.columns = ['Test True Y','Model Predictions']\n",
        "pred_df_5"
      ],
      "metadata": {
        "id": "FnpnYdihVM9E",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "outputId": "c14abde9-3fe6-457a-dc15-8bb61703c14a"
      },
      "execution_count": 210,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The mean squared error is 0.39841610193252563\n",
            "19/19 [==============================] - 0s 2ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Test True Y  Model Predictions\n",
              "0       0.600000           0.810903\n",
              "1       1.931788           1.505372\n",
              "2       3.900000           3.368089\n",
              "3       2.700000           2.852422\n",
              "4       3.500000           3.864311\n",
              "..           ...                ...\n",
              "595     6.200000           4.286557\n",
              "596     4.600000           3.248118\n",
              "597     0.800000           1.469215\n",
              "598     0.600000           0.701844\n",
              "599     1.500000           1.269098\n",
              "\n",
              "[600 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1f5b6851-3a0e-4e8c-89e2-fbc57b14a365\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Test True Y</th>\n",
              "      <th>Model Predictions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.600000</td>\n",
              "      <td>0.810903</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.931788</td>\n",
              "      <td>1.505372</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3.900000</td>\n",
              "      <td>3.368089</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.700000</td>\n",
              "      <td>2.852422</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3.500000</td>\n",
              "      <td>3.864311</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>595</th>\n",
              "      <td>6.200000</td>\n",
              "      <td>4.286557</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>596</th>\n",
              "      <td>4.600000</td>\n",
              "      <td>3.248118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>597</th>\n",
              "      <td>0.800000</td>\n",
              "      <td>1.469215</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598</th>\n",
              "      <td>0.600000</td>\n",
              "      <td>0.701844</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599</th>\n",
              "      <td>1.500000</td>\n",
              "      <td>1.269098</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>600 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1f5b6851-3a0e-4e8c-89e2-fbc57b14a365')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1f5b6851-3a0e-4e8c-89e2-fbc57b14a365 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1f5b6851-3a0e-4e8c-89e2-fbc57b14a365');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 210
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Scatter Plot to compare the true and the predicted outputs**"
      ],
      "metadata": {
        "id": "GnZr1lbMVM9F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.scatterplot(x='Test True Y', y = 'Model Predictions', data = pred_df_5)"
      ],
      "metadata": {
        "id": "rJejRwG6VM9F",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "outputId": "63087cab-cabd-4943-d12a-141fa0c65586"
      },
      "execution_count": 211,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f7e930fe850>"
            ]
          },
          "metadata": {},
          "execution_count": 211
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# list all data in history\n",
        "print(history_5.history.keys()) \n",
        "# summarize history for loss\n",
        "plt.plot(history_5.history['loss'])\n",
        "plt.plot(history_5.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'val'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "yXqXgwVhVM9F",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "outputId": "c35078c1-59c8-468f-83ff-157571f4e7bb"
      },
      "execution_count": 212,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict_keys(['loss', 'val_loss'])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Learning Rate Influence**"
      ],
      "metadata": {
        "id": "tC90zIgf5m3C"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Esse trecho foi adaptado de https://machinelearningmastery.com/understand-the-dynamics-of-learning-rate-on-deep-learning-neural-networks/\n",
        "\n",
        "def fit_model(X_train,y_train,X_val,y_val,lrate):\n",
        "  #define model\n",
        "  input_dim = X_train.shape[1]    #entrada tem dimensão 12, isto é, 12 nós de entrada\n",
        "  model_5_mom = Sequential()\n",
        "  model_5_mom.add(Dense(120,input_shape=(input_dim,),activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "  model_5_mom.add(Dense(20,activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "  model_5_mom.add(Dense(30,activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "  model_5_mom.add(Dense(1, activation=LeakyReLU(alpha=0.1)))                        #outuput layer\n",
        "  \n",
        "  #compile model\n",
        "  #opt = tf.keras.optimizers.SGD(learning_rate=lrate, momentum=0.9,decay=0.01)\n",
        "  opt = tf.keras.optimizers.SGD(lr=lrate)\n",
        "  model_5_mom.compile(optimizer= opt, loss='mse')\n",
        "  #model_5_mom.summary()\n",
        "  \n",
        "  #fit model\n",
        "  history_5_mom = model_5_mom.fit(X_train, y_train, validation_data = (X_val,y_val), epochs=60,verbose=0)\n",
        "  \n",
        "  #plot learning curves\n",
        "  plt.plot(history_5_mom.history['loss'])\n",
        "  plt.plot(history_5_mom.history['val_loss'])\n",
        "  #plt.title('Learning Rate='+str(lrate), pad=-50)\n",
        "  plt.title('Learning Rate='+str(lrate))\n",
        "  plt.legend(['train', 'val'], loc='upper left')\n",
        "  plt.ylabel('loss')\n",
        "  plt.xlabel('epoch')\n",
        "\n",
        "plt.figure(figsize=(15, 20))\n",
        "# create learning curves for different learning rates\n",
        "learning_rates = [0.7, 1E-1, 1E-2, 1E-3, 1E-4, 1E-5, 1E-6, 1E-7]\n",
        "for i in range(len(learning_rates)):\n",
        "\t# determine the plot number\n",
        "\tplot_no = 430 + (i+1)\n",
        "\tplt.subplot(plot_no)\n",
        "\t# fit model and plot learning curves for a learning rate\n",
        "\tfit_model(X_train, y_train, X_val, y_val, learning_rates[i])\n",
        "# show learning curves\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 937
        },
        "id": "IiJiNzFjvuH5",
        "outputId": "b82b9989-feea-4e39-fc88-3b7ea809a21c"
      },
      "execution_count": 213,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/keras/optimizers/optimizer_v2/gradient_descent.py:108: UserWarning: The `lr` argument is deprecated, use `learning_rate` instead.\n",
            "  super(SGD, self).__init__(name, **kwargs)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x1440 with 8 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Analysis of Learning Rate Influence**"
      ],
      "metadata": {
        "id": "TbfKQb4rBKsd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "É interessante notar que, para learning rates muito baixas, a rede neural não consegue aprender praticamente nada, dado que a atualização dos pesos é bem pequena.\n",
        "\n",
        "Para o caso de learning rates mais altas (como 0.1), o sistema apresenta oscilações significativas, dado que a variação dos pesos em cada atualização é mais alta."
      ],
      "metadata": {
        "id": "4bBUvrDR7Mbz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Momentum Dynamics**"
      ],
      "metadata": {
        "id": "aJYq-aMx71F4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "O uso de momentum pode fazer com que a rede não fique presa em mínimos locais e evolua para achar o mínimo global. Tal efeito pode acelerar o processo de treinamento.\n",
        "\n",
        "Vamos avaliar o efeito do momentum utilizando uma learning rate constante de 0.0001."
      ],
      "metadata": {
        "id": "cxFYb3tw7-AL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Esse trecho foi adaptado de https://machinelearningmastery.com/understand-the-dynamics-of-learning-rate-on-deep-learning-neural-networks/\n",
        "\n",
        "def fit_model(X_train,y_train,X_val,y_val,momentum):\n",
        "  #define model\n",
        "  input_dim = X_train.shape[1]    #entrada tem dimensão 12, isto é, 12 nós de entrada\n",
        "  model_5_mom = Sequential()\n",
        "  model_5_mom.add(Dense(120,input_shape=(input_dim,),activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "  model_5_mom.add(Dense(20,activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "  model_5_mom.add(Dense(30,activation=LeakyReLU(alpha=0.1)))  #hidden layer\n",
        "  model_5_mom.add(Dense(1, activation=LeakyReLU(alpha=0.1)))                        #outuput layer\n",
        "  \n",
        "  #compile model\n",
        "  opt = tf.keras.optimizers.SGD(lr=0.0001,momentum=momentum)\n",
        "  model_5_mom.compile(optimizer= opt, loss='mse')\n",
        "  #model_5_mom.summary()\n",
        "  \n",
        "  #fit model\n",
        "  history_5_mom = model_5_mom.fit(X_train, y_train, validation_data = (X_val,y_val), epochs=60,verbose=0)\n",
        "  \n",
        "  #plot learning curves\n",
        "  plt.plot(history_5_mom.history['loss'])\n",
        "  plt.plot(history_5_mom.history['val_loss'])\n",
        "  plt.title('Momentum='+str(momentum), pad=-80)\n",
        "  plt.legend(['train', 'val'], loc='upper left')\n",
        "  plt.ylabel('loss')\n",
        "  plt.xlabel('epoch')\n",
        "\n",
        "plt.figure(figsize=(20, 20))\n",
        "# create learning curves for different learning rates\n",
        "momentums = [0.0, 0.5, 0.8,0.9]\n",
        "for i in range(len(momentums)):\n",
        "\t# determine the plot number\n",
        "\tplot_no = 430 + (i+1)\n",
        "\tplt.subplot(plot_no)\n",
        "\t# fit model and plot learning curves for a momentum\n",
        "\tfit_model(X_train, y_train, X_val, y_val, momentums[i])\n",
        "# show learning curves\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 595
        },
        "id": "zV0R8Mah8pWZ",
        "outputId": "dde18dd3-d4aa-45b6-bc92-efeb1bceffee"
      },
      "execution_count": 214,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x1440 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Analysis of Momentum Dynamics**"
      ],
      "metadata": {
        "id": "XCd-e7luBRIq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Como previsto, o momentum realmente tem um efeito de acelerar o treinamento, por impedir que o treinamento fique preso em mínimos locais, fazendo com que o erro de treinamento e o erro de validação atinjam valores baixos bem mais rápido."
      ],
      "metadata": {
        "id": "gga1ZOtzA8AQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2. **General Results**"
      ],
      "metadata": {
        "id": "a0DYo3iwnvdl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Scatter plots to compare the predicted and the true outputs for the five proposed networks**"
      ],
      "metadata": {
        "id": "yqx7yDPy6oVP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axes = plt.subplots(nrows = 1, ncols = 5,figsize=(16, 3),constrained_layout = True)\n",
        "dados = [pred_df_1,pred_df_2,pred_df_3,pred_df_4,pred_df_4_reg,pred_df_5]\n",
        "i=0\n",
        "for current_ax in axes:\n",
        "  current_ax.set_title(\"Network %i\"%(i+1))\n",
        "  sns.scatterplot(x='Test True Y', y = 'Model Predictions', ax = current_ax, data = dados[i])\n",
        "  i = i+1"
      ],
      "metadata": {
        "id": "IpZDMIFEY4c8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "outputId": "63fb7392-a31a-4313-f652-6a58da7603af"
      },
      "execution_count": 215,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x216 with 5 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Evolution of the training (train/validation) for the five proposed networks"
      ],
      "metadata": {
        "id": "c2BhRYeM625l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig2, axes2 = plt.subplots(nrows = 1, ncols = 5,figsize=(16, 3),constrained_layout = True)\n",
        "\n",
        "histories = [history_1.history,history_2.history,history_3.history,history_4.history,history_5.history]\n",
        "\n",
        "i=0\n",
        "for current_ax in axes2:\n",
        "  current_ax.set_title(f\"Evolution of the training %i\"%(i+1))\n",
        "  current_ax.set_xlabel('epoch')\n",
        "  current_ax.set_ylabel('loss')\n",
        "  current_ax.plot(histories[i]['loss'])\n",
        "  current_ax.plot(histories[i]['val_loss'])\n",
        "  current_ax.legend(['train', 'val'], loc='upper right')\n",
        "  i=i+1"
      ],
      "metadata": {
        "id": "A6IuI-Pu6XAZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "outputId": "a5cc7ef3-94d3-475f-d44e-ee024d92c9b6"
      },
      "execution_count": 216,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x216 with 5 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Discussion"
      ],
      "metadata": {
        "id": "IOxBuZhymxGt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Observamos que aumentando gradativamente a complexidade da rede (mais camadas e mais neurônios), realmente pudemos observar uma tendência redução da métrica MSE, indicando uma melhoria na regressão."
      ],
      "metadata": {
        "id": "Ulop3noSXXIh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mean Squared Error (MSE) for the five proposed networks"
      ],
      "metadata": {
        "id": "SN-GTkNTS5Vl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(f'MSE of Network 1: {MSE_1}')\n",
        "print(f'MSE of Network 2: {MSE_2}')\n",
        "print(f'MSE of Network 3: {MSE_3}')\n",
        "print(f'MSE of Network 4: {MSE_4}')\n",
        "print(f'MSE of Network 4 Reg: {MSE_4_reg}')\n",
        "print(f'MSE of Network 5: {MSE_5}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RjAbO39sS0hP",
        "outputId": "c8dd4693-8c13-4f79-c7f8-7ea94681af4e"
      },
      "execution_count": 257,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MSE of Network 1: 0.4349794387817383\n",
            "MSE of Network 2: 0.4269172251224518\n",
            "MSE of Network 3: 0.40785548090934753\n",
            "MSE of Network 4: 0.9419118165969849\n",
            "MSE of Network 4 Reg: 0.9026591777801514\n",
            "MSE of Network 5: 0.39841610193252563\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Evaluation of the Regularization Effect**"
      ],
      "metadata": {
        "id": "TrZoofsp5UQM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Em alguns testes iniciais, tivemos dificuldade de observar overfitting, mesmo aumentando bastante o número de épocas e de neurônios nas camadas. Nesse primeiro momento, estávamos usando 2000 linhas de dados do nosso dataframe.\n",
        "\n",
        "Portanto, decidimos fazer uma alteração no experimento 4, introduzindo ruído gaussiano nos dados de treinamento, para trazer mais complexidade à rede e garantia que o overfitting ocorreria. Além disso, passamos a usar 3000 linhas de dados do dataframe.\n",
        "\n",
        "Fazendo isso, conseguimos realmente observar que, no histórico da perda em função das épocas, o erro de treinamento realmente caiu continuamente, enquanto o erro da validação começou a aumentar a partir de certo momento, mostrando que a rede estava decorando os dados de treinamento, característica que mostra o overfitting.\n",
        "\n",
        "Introduzindo a técnica da regularização L2, observamos que tal característica não mais ocorreu e o overfitting deixou de ocorrer. Verificamos assim a utilidade de usar a regularização L2 para prevenir overfitting."
      ],
      "metadata": {
        "id": "PeiD-AHMpy2w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig3, axes3 = plt.subplots(nrows = 1, ncols = 2,figsize=(8, 3),constrained_layout = True)\n",
        "\n",
        "histories = [history_4.history,history_4_reg.history]\n",
        "\n",
        "i=0\n",
        "for current_ax in axes3:\n",
        "  if (i==0):\n",
        "    current_ax.set_title(f\"Evolution of the training 4\")\n",
        "  if (i==1):\n",
        "    current_ax.set_title(f\"Evolution of the training 4 w/ regularization L2\")\n",
        "  current_ax.set_xlabel('epoch')\n",
        "  current_ax.set_ylabel('loss')\n",
        "  current_ax.plot(histories[i]['loss'])\n",
        "  current_ax.plot(histories[i]['val_loss'])\n",
        "  current_ax.legend(['train', 'val'], loc='upper right')\n",
        "  i=i+1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "QuxrGDHCWsAE",
        "outputId": "604e05a5-fcf4-473c-8793-b3673afd5294"
      },
      "execution_count": 255,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x216 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Por impedir o overfitting, a regularização troxe também um ganho para a métrica MSE:"
      ],
      "metadata": {
        "id": "mGwUzsSbqPSN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(f'MSE of Network 4: {MSE_4}')\n",
        "print(f'MSE of Network 4 Reg: {MSE_4_reg}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "blxcVzKcX-4s",
        "outputId": "7bc70d56-44e5-4e9d-802d-1e8be9d77dd0"
      },
      "execution_count": 256,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MSE of Network 4: 0.9419118165969849\n",
            "MSE of Network 4 Reg: 0.9026591777801514\n"
          ]
        }
      ]
    }
  ]
}
